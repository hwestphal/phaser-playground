<module>01-Beginner Javascript
<lesson>01-Hello World

<p> d
<break>
<p>p






<shortdesc>In this lesson, we will write our first program, a silly game called 'Doo-Doo Head'.


<P(h1)>Hello World

<p(img=dennis.png)>There is a tradition among programmers that the FIRST program you write in any new language prints out the words “Hello World”. This dates back to the legendary programmer Dennis Ritchie, arguably the father of modern computing.

<p>You will run a small ^JavaScript^ program to print “Hello World”. In fact, we're going to say "Hello World" in THREE different ways.


<break>
<p>First, we are going to print 'Hello World' using the debugger built into your browser.  Then we are going to pretend we are on an old-fashioned 'Green Terminal'.  Then we are going to print it using a very low-level graphics engine in your browser.  











<p(h2)>Using your Browser's Console




<p>Javascript programs run in your browser, and there is an essential tool called the ^Console^ that lets you peek at what they are doing.  The first step is to open up that Console.


<break>
<p(img=ctrlJ.png)>To open the Console on Windows or Linux, press [`Ctrl`|control] +`Shift`+`J`. 
<p>More precisely, hold down [`Ctrl`|control] and `Shift` and #then# press `J`, not all at once.  You probably knew that. On a Mac, press `Command`+[`Opt`|option]+`J`. 

<p>Try it now, make sure it works.





<p>The image on the right is what you should see using Chrome.  It will be slightly different in Firefox and Microsoft Edge. If you are using another browser, then download [Chrome | Chrome | https://www.google.com/chrome] or [FireFox | Fire Fox | https://www.mozilla.org/en-CA/firefox/new/] and try again.  

<break>
<p>If your console docks at the bottom of your page instead of the right side, press on the [`⋮`| 3 dots] icon at the top right corner of the console, and change the dock settings.


<p>If you have trouble, stop and get help.  You should not go on until you have a console open.

<p>Once the console is open, you can hide it again with [`Ctrl`|control] +`Shift`+`J`.  Try it now. Now show it again.












<break>
<p>We are going to run the following one-line program, without explaining it until afterwards.  [ | console dot log Hello World]:


<code>
console.log(“Hello World”)


<p>We have already typed it in for you. Press the blue 'running man' on the left to ^run^ this program, and you should see a result in the console.  Try it now.  Did you see “Hello World” typed in the console?

<break>
<p>Now press ^copy^ (above the blue man) to move the code to the editor box.  There you can change this program and run it again.  Change the words ^"Hello World"^ to ^"Hello Everyone"^, but be careful NOT to move outside the quotes or the brackets.  For example, you might change it to 

<code>
console.log("Hello Everyone")


<break>
<p>If you mess up the code and it stops working, you can reload the editor with the copy command again. 
<p>OK, got that working?  Let's break it down.

<break>
<p>[^console.log()^|console log] is a call to the `log()` ^method^ of the `console` ^object^ that prints values between the brackets [^(^|open] and [^)^|close] to the ^Console^.  

<p>In this case, the value was a single ^string^ value, which is the written text between the #quote# marks. 

<p>That sounds like a foreign language because we haven't introduced objects, methods, or strings yet. Well, we have to start somewhere.

<p>OK, what's a ^string^?









<p(h1)>Strings

<p>A ^string^ is a sequence of digits or letters that represent text. They start and end with #quote# characters. You can use single-quote, double-quote, or backticks as the #quote# characters, and they are not included in the string.  Here are some examples.

<code(norun)>
"Today is my birthday"
'I am going for a walk.'
`Pi is approximately 3.1415`
"I am not a good string`

<p>The important thing is that you have to use the #same# quote character for both the start and the end.  If you start with a single quote, then you have to finish with a single quote too.  Can you see why the last string is wrong?

<p>Programmer's editors use colors to highlight different things.  This course uses a red tone to show strings, which is also the default for Visual Studio and VS Code.  Once you notice the colors, it's pretty easy to see strings.


<break>
<p>You can put almost anything into a string, but you must be careful trying to put the type of quote that you start or end the string with.  Here's a string that starts with a single-quote and runs into trouble.




















<code(norun)>
'So many things that I don't know yet'

<p>One way we can fix this is by using double-quotes instead, but then we often run into problems with strings that contain double quotes.  Still, it works most of the time.

<code(norun)>
"So many things that I don't know yet"


<p>JavaScript's trick for these problem quotes is to put a backslash [`\`|] in front of the problem quote, like this.
<code(norun)>
'One fewer thing that I don\'t know yet'
 

<p>If it has occurred to you to ask, then yes, you must put a backslash in front of a real backslash that you want in your string.  Run the following program.  It's got several errors in it, which a programmer would call 'bugs'. Can you fix it and make it work?

<code>
console.log('Now I know how to add a single backslash \\ to my string to 'escape' a quote that doesn't work.')

<p>There's a lot more to ^strings^, and we'll circle back. Let's move on for now.






<break>
<p(mindset)>Sometimes we move very quickly over a concept. But we are using a popular language, and the Internet is full of wonderful resources for learning how to program it.  One of the better websites is [W3Schools.com|W 3 Schools dot com|https://www.w3schools.com/]

<p>There you can find clear, well-organized, and well-written tutorials.  Look on the left side for the ^JavaScript^ section.  Here's their tutorial for [^strings^|strings|https://www.w3schools.com/js/js_strings.asp].









<p(h2)>Variables



<p>Sometimes we want the computer to 'remember' things, so that we can reuse or process them.  To hold things, we use a ^binding^.

<p>A ^binding^ points at a chunk of data (which we will call a 'thing').  Think of it as a tentacle that reaches out and keeps a touch on that thing.  Before we use a ^binding^, we must declare it with the `let` statement.

<code>
let greeting          // declare a binding
greeting = 'hello'    // reach that binding out and grab onto string 'hello'

<p>We say [`greeting = 'hello'`|greeting gets hello] instead of equals.  #Gets# dates back to earlier languages where the string 'hello' would be slammed into a memory area called 'greeting'.  It's not completely accurate, but you should use #gets# instead of #equals#. (you will see why in a minute).

<p>We can declare the ^binding^ and assign it in one step: `let greeting = 'hello'`.  But don't confuse the two steps, because you are not allowed to declare 'greeting' a second time.  This code is wrong, but we can fix
it by removing the #let# from the second line.  Copy it into the editor and make it work.

<code>
console.log(greeting)

<p>Good news! Our editor seems to know about JavaScript, and will quickly warn us about simple mistakes.  Do you see why #equals# is wrong and we should say #gets#?  










<p(h2)>Names for Bindings
<p>In JavaScript, names for binding must start with a letter, a dollar-sign `$`, or an underscore `_`, and can contain letters, numbers, or underscores.  Names are case-sensitive, so #Greeting# is not the same binding as #greeting#.

<p>Bindings are usually called #variables# for historical reasons, because in many computer languages the name was a shorthand for the memory location where a thing was stored, and the content of that memory location was 'variable'.  If you see the word 'variable in relation to JavaScript, we mean a binding.







<break>
<p(science)>In this course, we are going to use [^CamelCase^|Camel case | https://wiki.c2.com/?CamelCase] for naming, and we recommend you do too. Our convention is that variable names start with lower-case, and library names start with upper-case, and then we put 'humps' in on word boundaries.  For example [`myNewVariable` | my new variable].

<p>Another common naming convention is [^SnakeCase^|Snake case], for example [`my_new_variable`|my new variable].  Both work fine, and there are many others.  Pick the one you like.  If you work on a project with other programmers, you will want to agree with them on your conventions.

<break>
<p>A good name should be descriptive and help in understanding the program.  For example, we used ^greeting^ for a greeting.  But sometimes we use a simple name like ^i^ or ^j^ to represent a temporary counter, and that's descriptive too - you know it's a counter and won't be around for long.


<p>Good programmers spend a lot of time thinking about the right names for their variables.  





<break>
<p(history)>You should avoid using a single underscore or single dollar-sign as a variable name.  They are perfectly 'legal', but those two names were taken by two of the early and best-loved JavaScript libraries, [Underscore.JS | under score dot j s | https://underscorejs.org/] and [jQuery| j query | https://jquery.com/].  

<p>[Underscore.JS |under score]  is dead, but many of the ideas it introduced have been added to JavaScript.  [jQuery |j query] is still a powerhouse, but in decline because newer frameworks have emerged.  Consider those names already 'taken', like Sting and Madonna.




















<p(h1)>A Library To Print Stuff

<p>[`console.log()`|console log] is super convenient for debugging code, but it's not a nice way to write a program.  This course is built on a library called #Baby# that was specifically written for writing a graphics-and-math course.  #Baby# was built on top of the awesome [BabylonJS|Babylon J S|https://www.babylonjs.com/] rendering engine, hence the name.

<p>To include #Baby# in your program, you ask for a `new Baby()`, and assign it to binding called `app` like this.

<code(norun)>
let app = new Baby()

<p(img=vt52.jpg)>The #Baby# library includes a bit of code to emulate an old-fashioned computer terminal called the [<b>VT52</b>|v t fifty-two|http://www.columbia.edu/cu/computinghistory/vt52.html], including the slow character-by-character output.  

<p>When we want to fire the #VT52# up, we use our `app` binding for #Baby#, and use it to call `app.VT52()`.  Of course we want a binding so we can 'keep hold of' and use the VT52, which we call `vt`.

<code(norun)>
let app = new Baby()
let vt = app.VT52()

<p>Now we can manipulate the #VT52#. for example calling the `print()` method.  The first thing we do is...   Try it.

<code>
let app = new Baby()
let vt = app.VT52()
vt.print('hello world')











<p(h1)>Control Statements
<p>We're going to write my favorite game.  It's called #Doo-doo Head#. Before we start, I should mention that my name is 'Tom'.  


<p>There are two important control statements in JavaScript:  `if()` and `while()`. Let's take a look.
















<p(h2)>`if (condition) {statements}`

<p>Not all programs are straight roads. Sometimes you want to turn left or right.

 Try this out.

<code>
let app = new Baby()
let vt = app.VT52()

let name = prompt('what is your name')
if(name == 'tom'){
   vt.print('Tom is a great guy')
}


<p(img=if.jpg)>The `if()` statement evaluates the condition in brackets, and then executes a block of statements "wrapped" in  [`{` and `}`|curly braces] if that condition is true.  To make it more readable, we #indent# the statements that belong to the `if()`.


<break>
<p>Oops.  Need a quick detour here to talk about the [curly braces `{` and `}`|curly braces].

<p>A ^statement^ can be a single line of code, or a ^block^ of many statements "wrapped" in [curly braces `{` and `}`|curly braces].  












<break>
<p>There are two really important ideas here.
<p(bullet)>`if()` runs a SINGLE statement if the condition is true.   
<p(bullet)>Whatever is in the curly brackets is just a SINGLE statement, even if it is a thousand pages of code.

<p>If you leave out the [curly braces `{` and `}`|curly braces], you can still put in ONE statement.  But for now, you should ALWAYS use curly braces.





<break>
<p>Back to `if()`.  Run this program, and check the output.  Then change the 'Tom' in line 4 to something else (perhaps 'Jane') and run it again.

<p>[BTW | by the way] notice that we can mix `console.log()` and `vt.print()`.  Programmers like to use the #console# as a debugging tool. 

<code>
let app = new Baby()
let vt = app.VT52()

let name = 'Tom'

if(name == 'Tom')     // check whether this is true
	  console.log("name is equal to 'Tom'");
	  vt.print("Tom is a terrific guy")

<p>It seems that everyone agrees that "Tom is a terrific guy".  But go back to the program and press `Ctrl` + `Shift` + `I` to reformat the text.  Can you see what happened?











<break>
<p>Did you notice the double-equals [`==`|] in the `if()` statement?  That is how JavaScript says ^equals^, and why we should say #gets# when we use the single-equals ^assignment^ operator.  Mixing up these two operators is one of the most common errors in JavaScript.





<p>JavaScript doesn't care how you format a program. You can put the entire program on one long line. Let's try again. 

<break>
<p>Here's the same program again, but with [curly braces `{` and `}`|curly braces] around the statements that should be in the `if()` block.  Try it now.  And try the `ctrl`+`shift`+`I` again.

<code>
let app = new Baby()
let vt = app.VT52()

let name = 'Tom'

if(name == 'Tom'){     // check whether this is true
	  console.log("name is equal to 'Tom'");
	  vt.print("Tom is a terrific guy")
}

<p>Do you understand why "Tom is a terrific guy" was not part of the `if()` earlier but is now?  If you are not sure, then go back and read this section again.




<p>This kind of error is easy to make, so many JavaScript programmers ALWAYS use curly braces.  And they compulsively reformat their programs. 

<break>
<p(img=if_else.jpg)>By now you have probably figured out what `if()` does.  Here's a slightly more complicated version


<p(h2)>`if (condition) {statement} else {statement}`

<p>When you have code that executes when your condition is true, then you may also have different code for when the condition is false. This 'false' path is represented by the second arrow in the diagram.

<break>
<p>Try this out.  Don't forget to re-format it.  Then change line 4 to use YOUR name, and try again.

<code>
let app = new Baby()
let vt = app.VT52()

let name = 'Tom'

if(name == 'Tom'){     // check whether this is true
	  vt.print(name + " is a terrific guy")
}else{
	  vt.print(name + " is a Doo-doo Head"
}






















<p(h2)>Simple Input
<p>We don't really want to change the program every time we run it.  Here's a simple way to ask the user for input.

<code>
let app = new Baby()
let vt = app.VT52()

let name = prompt('What is your name?')

if(name == 'Tom'){     // check whether this is true
	  vt.print(name + " is a terrific guy")
}else{
	  vt.print(name + " is a Doo-doo Head")
}












<p>The function `prompt()` has an optional string that will be presented when it prompts you for input.  It collects whatever the user types, and returns it. 

<p>Line 1 of the program declares the value `name`, calls a function that will return a string, and then touches a tentacle from `name` to the returned string.  Don't skip any of these steps when you think about your program.




















<break>
<p(mindset)>We seem to be introducing lots of functions with strange names, like [`console.log()`|console dot log] and `prompt()`. Don't be frightened.  The editor will help us remember names and get them right.

<p>Every community has its own jargon, a secret "insider" language.  and you simply have to learn it to join.









<break>
<p(img=while.jpg)>Here's the last part of the #Doo-doo Head# game.  We need a loop so that we can try more than one name.

<p>
<p(h2)>`while (condition) {statement}`

<p>A `while()` loop does exactly what it sound like.  It executes a test, called a #condition#, and if that test is satisfied then it executes the statement.  At the end of the statement, it loops back and tries the condition again.  If the test is not satisfied, then execution picks up again after the end of the statement.



<p>#Warning:# there are lots of ways to get into trouble with a `while()` loop.  It is very easy to create an 'infinite' loop that runs and runs, forcing you to shut down your browser (or maybe even reboot your computer).

<break>
<p>Here's an example of a loop. The value ^true^ always evaluates to true, so a ^while(true)^ loop is intentionally an infinite loop.   Try it.  (Remember that #Tom# has a capital-T).

<code>
let app = new Baby()
let vt = app.VT52()

while(true){
	let name = prompt('What is your name?')
	if(name == 'Tom'){     // check whether this is true
		vt.print(name + " is a terrific guy")
	}else{
		vt.print(name + " is a Doo-doo Head")
	}
}
vt.print("The game is over")

<p>Hey, isn't that an #awesome# game.  Well, it's not entirely bad for our first day.

<break>
<p>Let's finish it off.  The problem is that we don't have a way of exiting the program, to get the "The game is over" statement.  Let's assume we are ready to quit after acknowledging the awesomeness of Tom.

<p>We can simply put a ^break^ statement in the code after Tom.  It might look like this.


<code>
let app = new Baby()
let vt = app.VT52()

while(true){
    let name = prompt('What is your name?')
    if(name == 'Tom'){     // check whether this is true
        vt.print(name + " is a terrific guy")
        break
    }else{
        vt.print(name + " is a Doo-doo Head")
    }
}
console.log("The game is over")


<p>Or, we could move the `let name` outside the loop and initialize it to the ^empty string^.  Then we can test at the top of the loop whether `name` is equal to #Tom#. It might look like this.


<code>
let app = new Baby()
let vt = app.VT52()

let name = ''

while(name !== 'Tom){
    name = prompt('What is your name?')
    if(name == 'Tom'){     // check whether this is true
        console.log(name + " is a terrific guy")
    }else{
        console.log(name + " is a Doo-doo Head")
    }
}
console.log("The game is over")





























<p(img=blockerror.png)>Be careful NOT to redefine `name` a second time.  JavaScript lets you do this, the `name` inside the block is different from the one outside the block.  `while()` will test the first one, and the input will update the second one.  This kind of error is very hard to find.

<p>And that's our Doo-doo Head game.  
























<p(h2)>Try Your Own Games
<p>You have just enough knowledge to get into trouble.  Go for it.  

<break>
<p>Here are some helpful coding tidbits that you should know:
<p(bullet)>The opposite of the condition [(`name == 'Tom'`)|name equals tom] is [(`name !== 'Tom'`)|name not equals tom].  This lets you loop until `name` is NOT #Tom#.
<p(bullet)>If you want to loop around inside the `while()` before you get to the end, use the ^continue^ statement.  Here's a tutorial on [^break^ and ^continue^|break and continue| https://www.w3schools.com/js/js_break.asp].

<break>




