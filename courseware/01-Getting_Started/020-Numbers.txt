<module>01-Beginner Javascript
<lesson>02-Numbers
<shortdesc>JavaScript's Number Type






<Title>JavaScript Numbers
<p(img=binary.jpg)>In the last lesson we played a bit with ^strings^, this chapter is about JavaScript's ^numbers^.











<p>We use ^numbers^ for counting, and sometimes for arithmetic. We can add, subtract, multiply and divide number values and produce a new number value. In a JavaScript program, numbers are written like this:
<code(norun)>
13
9.81

<p>Try running, and then modifying this little program.
<code>
// make sure the console is open (ctrl+shift+J)
// so you can see your result
console.log('my answer is ',2 + 2)

<p>Can you calculate the value of 2 + 2 + 2?  Please try each of the little programs as you proceed through this lesson.  Modify them, play with them.




<p(h2)>Arithmetic



<p>JavaScript arithmetic is exactly like what you learned in school, except we use [`*`|multiply] for multiplication instead of `x`.

<p>The four basic math operations are: [`+`|plus] for addition, [`-`|minus] for subtraction , [`*`| times] for multiplication , and [`/`|divide] for division .   

<p>And of course you can use brackets, for example [`2 + 3 * 2`|2 plus 3 times 2] is 8, but [`(2 + 3) * 2`|open bracket 2 plus 3 close bracket times 2]] is 10. 

<p>Use [`**`|exponent] for both powers and roots.   [`3<sup>2</sup>`|3 squared] is [`3**2`|3 exponent 2] and if you remember that the square root of 3 is [`3<sup>.5</sup>`|3 raised to point 5] then use   
[`3**.5`|3 exponent point 5] for square root.





<break>
<p>Try out these statements, play around with them and make sure they make sense to you.
<code>
let a = 1          // 1
let b = 2 + 3      // 5
let c = a + b      // 6
let d = c ** 2     // 36
let e = d / 12     // 3
console.log(a,b,c,d,e)

<p>We'll come back to numbers in the next lesson.






<p>JavaScript arithmetic is exactly what you learned in school, except that we use [`*`|star] for multiplication instead of 'x'.  You can add with [`+`|plus], subtract with [`-`|minus], and multiply and divide with [`*`|star] and  [`/`|slash] .  We call these  ^operators^, and we are going to learn about a dozen operators today.

<p>Try out some different calculations yourself.  Here's a starter:

<code>
console.log(3 * )
console.log(22 / 7)

<p(img=error.png)>Did you notice that sometimes red squiggly lines appear in the code? That means there is a ‘grammar’ error in your code that you should correct before you try running it.  Some errors are simply because you have started typing and haven’t yet finished, and they quickly go away.
















<p(h2)>Order of Operations
<p>Consider the following calculation:  100 + 4 [*|times] 11  (remember that [*|star] means to multiply).  Does the example mean "add 4 plus 100, and multiply the result by 11,"  or is the multiplication done before the adding?
<p>


<p>If you remember your school lessons, you know the multiplication happens first, and you can change the order with brackets.   That’s exactly how it works in JavaScript. Try it.

<code>
console.log( 100 + 4 * 11 )
console.log( (100 + 4) * 11 )

<p>Without brackets, the calculation order is determined by the #precedence# of the operators. The example shows that multiplication and division come before addition and subtraction.  Operators with the same precedence that appear next to each other, as in `1 [-|minus] 2 [+|plus] 1`, are applied left to right as `(1 [-|minus] 2) + 1`.

<p>Don't worry too much about this.  When in doubt, just add brackets.  And remember that you need brackets for `console.log()`.






<break>
<p(mindset,img=bodmas.png)>Keep arithmetic order of operations straight with the mnemonic  [BODMAS|BODMAS|https://www.mathsisfun.com/operation-order-bodmas.html] (<i>Brackets, Orders, Divide or Multiply, Add or Subtract</i>).  If you need a refresher, follow the link.

<p>In the [US |U S] it is called [PEMDAS|pemdas|https://www.mathsisfun.com/operation-order-pemdas.html] (<i>Parentheses, Exponents, Multiply or Divide, Add or Subtract</i>).

<p>Javascript actually has 21 different [levels of precedence|levels of precedence|https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence], and no one can remember them all.  Brackets `(` and `)` are at the very top, and use them freely.  
<break>




<p>Calculating with fractions is often not exact.  The exact value of [1/3| one third] requires an infinite number of digits, and we usually round it to [.33| point 3 3] or [.333|point 3 3 3] depending on what accuracy we need.

<code>
// JavaScript tries to keep 13-15 digits of accuracy
console.log(1/3)  // 0.333333333333333

















<p(h2)>Remainder
<p>Here's another arithmetic operator.  The [`%`|percent] symbol is called ^mod^, and gives the remainder of a division.   `10 [%|mod] 3` gives 1 because 10 divided by 3 gives a remainder of 1.  

<p>It's super useful because we can figure out whether one number exactly divides another.  If it does then the ^mod^ is zero.








<code>
console.log(10 % 3)  // 1, so NOT divisible by 3
console.log(10 % 2)  // 0, so divisible by 2

<p>What numbers will produce ^mod^ 0 for 10 ([eg:|for example] `10 mod 2`)?  Copy this code into the editor and try with different numbers.

<p>OK, 2 and 5. Have you considered 10?  How about 1?  What about 15?

<p>How about 0?  Why did zero give a strange result?  ^NaN^ stands for 'Not a Number'.

<p>You can use ^mod^ to split the whole and fraction parts of a number apart.

<code>
console.log(2.5)
console.log(2.5 % 1)
console.log(2.5 - (2.5 % 1))

<p>The second line tells us how to get the fraction part of a number.

<p>The third line is worth looking at again.   In the inner bracket we create a NEW value that is the fraction part of the number (like we did in the second line), and then we subtract it from the original number [`(2.5 – 2)`|two point five minus 2] to get the whole part.


<p(h2)>Bindings

<p>We now know how to do simple operations that produce new values from old values.  Sometimes we want to catch and hold the new values,  JavaScript provides a thing called a _binding_, which is simply a name that refers to something.

<code>
let myBinding = 2.5
console.log(myBinding)

<p>The word _let_ is a _keyword_ or 'special word' in JavaScript. It is followed by the name of the binding that you want to create.  Often we assign a value at the same time by following with an [`=`|assign] operator and an expression.

<p>Always use lowercase `let` because JavaScript won't recognized `Let` or `LET`.

<p>['let myBinding = 2.5'|let my binding equal two point five] creates a binding called [`myBinding`|my binding] and uses it to grab hold of a number value.  We can now use [`myBinding`|my binding] to point at our value.  Here's the _mod_ example again.

<code>
let myBinding = 2.5
let fractionPart = myBinding % 1
let wholePart = myBinding - fractionPart
console.log(wholePart)

<p>As a programmer, you read the first line as ["let myBinding get 2.5"|let my binding get two point five], and the second line as ["let fractionPart get myBinding mod 1"|let fraction part get my binding mod one].  You don't say "equals" because people will think you are a newbie.  Also because the intention of the ["="|assign] is to bind [`myBinding`|my binding] with the value [2.5|two point five].   Also because 'equals' in JavaScript refers to something else.  So say  ["let myBinding get 2.5"|let my binding get two point five].

<p>Notice the second and third lines did some calculations to create a NEW value before binding it. Also that we used [`myBinding`|my binding] as if we had typed [2.5|two  point five] each time.

<p>That’s useful because now we only had to type in [`2.5`|two point five] once in this program.  Now if we want to calculate the fractional part of [56.8| 56 point 8], we simply change the first line.

<p>If we can handle any number, it would be nice to ask the user what number he wants.  Here's another function called [`prompt()`|prompt] that shows a little dialog box asking you to type something, and passes back it back to your program.

<code>
let myBinding = prompt("Enter a number")

let fractionPart = myBinding % 1
let wholePart = myBinding - fractionPart
console.log(wholePart)

<p>Now we can find the whole part or fraction part of ANY number.


<p(h2)>Pointing To a New Value

<p>But the best trick with bindings is that [`myBinding`|my binding] doesn't always have to hold the same value forever  We can disconnect a binding and point it to a new value.   Here's a program that creates a binding and then modifies it (twice).

<code>
let myBinding = 5 * 5			// 25
console.log(myBinding)
// 25

myBinding = myBinding + 1
console.log(myBinding)
// 26

myBinding = myBinding + 1
console.log(myBinding)
// 27

<p>We created a binding [`myBinding`|my binding] in the first expression, and then used it in the second expression.  But then we assigned the value of the second expression back to [`myBinding`|my binding].  We changed the value of [`myBinding`|my binding].  And then we did it again.

<p(img=octopus.png)>We only used the keyword _let_ once at the top, when we wanted to CREATE this binding.  Then we re-used it. If you used _let_ to bind [`myBinding`|my binding] again, JavaScript would complain that [`myBinding`|my binding] already exists.  Try it.

<p>THIS IS IMPORTANT:  Imagine bindings as tentacles, rather than boxes. They do not _contain_ values; they _grasp_ them. Two bindings can refer to the same value. When you need to remember something, you grow a tentacle to hold on to it or you reattach one of your existing tentacles to it.

<p>We had a tentacle pointing to the _value_ 25.  We did NOT change `25` to `26`. We created a NEW _value_ of `26` somewhere else in the computer, and then switched our tentacle to point to it,  The `25` might still be there, but we have no way to find it without our tentacle.

<p>Also, did you notice that we added some comments in the code.  JavaScript will ignore everything on a line that follows two slashes.  Comments make your code more understandable, and good programmers add lots of them.

<br>

<p>Let's look at another example. You have been lending Luigi money. To remember the number of dollars that Luigi still owes you, you create a binding. And then when he pays back $35, you give this binding a new value:

<code>
let luigisDebt = 140;                // Luigi owe you $140
luigisDebt = luigisDebt - 35;        // he paid back $35
console.log("Luigi still owes you " + luigisDebt);   // show how much he still owes

<p>We did something neat here.  We put a _String_ into the `console.log()` to make it easier to read.  A _String_ is simply a small text between two quote signs.  You can use 'single-quotes'  or "double-quotes" as long as you use the SAME type of quote to start and end your string.  

<p>You can “add” strings together using the [_+_|plus] operator, although that isn’t really addition.  Of course, there is no subtraction or multiplication, but maybe we can think of an interesting game that does math on strings.

<code>
console.log(“hello” + “ “ + “world.”)



<p(h2)>Converting to a Number

<p>[`Prompt()`|Prompt] sends your program a _value_ with _type_ of _String_.  We will look at Strings soon, but the point here is that the type isn't a _Number_.  That can cause strange behavior.  Here's a program that adds a number to itself. Try it.

<code>
let someValue = prompt('Give me a Number')
console.log('Number plus Number is ' + someValue + someValue)

<p>Hmm, not exactly what we wanted.  And it doesn't do any good to put brackets in.  [`someValue`|some value] is already a string, and if we add a number and a string, JavaScript assumes we want a string as a result.

<p>Luckily there are functions in JavaScript to help us.  The function `Number()` converts almost anything to a _Number_. So maybe if we try this...  (watch out, `Number()` has a Capital N)

<code>
let someValue = prompt('Give me a Number')
someValue = Number(someValue)
console.log('Number plus Number is ' + someValue + someValue)

<p>Nope.  Still didn't work, because [`someValue`|some value] was converted to a string as soon as we tried using it in `console.log()`. Does that make sense?  It is like the 100 + 4 [*|times] 11 problem, we have to correct the precedence of operations to get what we want.

<p>One way to fix this is to add a new line that creates a binding for the calculation, perhaps called `double`, before we use `console.log()`.  Try it.

<p>Another way to fix this is to put brackets into the `console.log()` line, so that JavaScript does the addition of the two numbers first. Here’s what that would look like.

<code>
let someValue = prompt('Give me a Number')
someValue = Number(someValue)
console.log('Number plus Number is ' + (someValue + someValue))

<p>It works, but..?  Putting brackets didn't work when we tried it a minute ago?  That's because [`someValue`|some value] was a string when we tried to add with it.  Here we have converted someValue to a number, and we use the brackets to add the two numbers before JavaScript converts the result back to a string.  Are you clear about this?


<p(h2)>Using the Code Editor
<p(img=context.png)>We are coming to the Challenge Problem.  You have probably noticed that there isn’t a toolbar at the top of the code editor. There is no obvious way to save your document.  Never fear, the editor in the Challenge Problem (with the blue border)  will save every time you hit [CTRL+ENTER|Control plus enter] to run it.  So you don’t have to worry about finishing right away, you can close your browser and come back. 

<p>Here is useful tip. You can highlight text and then right-click.  A menu pops up on your screen (called a ‘context menu’), and you can use that menu to cut, copy, and paste. The context menu also shows you the short-cut keys. Such as [CTRL+C|control plus c] for copy.

<p(h2)>Using SLACK
<p(img=slack.png)>Click on the SLACK button on the right to join our channel.  You will have to sign up the first time, but it is free.  SLACK lets you chat with other programmers as a group or even one-to-one with voice and video.  We use it for to share ideas, collaborate, and help each other.s


<p(h2)>Challenge Problem

<p>This is the end of this lesson.  There is a challenge problem at the end of each lesson, and here is the first one. 

<p>When you have this problem solved, you must show it to a Proctor and explain your solution.  He or she will then unlock the next lesson for you.  A Proctor is like a coach, a teaching assistant, and a tester in one, they are here to help you. For now, Tom Berend is the only Proctor.

<p>This is a tough problem, and you should not hesitate to ask for help if you are stuck.  Use SLACK or simply contact one of the Proctors directly.  

Our goal is for you to fully understand how to solve this problem in JavaScript, but we won’t know how to help you until you try something hard. 

<br> 

<p>In Ontario, we charge a sales tax of 13%, which is added at checkout.  Here's a calculator that will ask you for the price of an item, and tell you how much you have to pay at the checkout. Try it out with a few values.  Try it with a few values.

<code>
let purchase = prompt("How much is your item?")
purchase = Number(purchase)     // convert to a Number

let salesTax = purchase * 0.13
let total = purchase + salesTax
console.log("You must pay " + total)

<p>If you type '1' or ['1.00'|one point zero zero], it works fine.  If you type ['1.10'|one point one zero], it returns too many digits.  If you try to buy something for ['1.11'|a dollar eleven],  Oops. JavaScript is trying to be accurate, but you only want to know to the penny, not to gazillion digits.

<p>But the problem is that your customer won't give you [$1.2543000000000002|a dollar twenty five four three zero zero zero zero two], she will only give you [$1.25|a dollar twenty five].  And if you are adding up what all your customers pay so that you can check the cash at the end of the day, you will be out by some tiny amounts.

<p>There are hundreds of useful functions in JavaScript, and one of them will chop your number to the nearest whole part. It's called [`Math.floor()`|math dot floor] and it does something similar to what we did with the mod function. Here's an example. 

<code>
let value = 34.5
console.log(Math.floor(value))

<p>We can use [`Math.floor()`|math dot floor] to chop numbers, but we have to be careful.

<p>Our strategy is to multiply `willPay` by 100 (so that pennies become dollars), chop off any remaining decimal digits, and then divide by 100 (bringing back the pennies).  That’s exactly what the program below does, using [`Math.floor()`|math dot floor] to do the chopping.

<p>Try it and follow the outputs.  It is important that you understand the technique.

<code>
let purchase = prompt("How much is your item?")
purchase = Number(purchase)     // convert to a Number

let salesTax = purchase * 0.13
let total = purchase + salesTax
console.log("JavaScript calculates " + total)

total = total*100
console.log(“We multiply by 100 to get “+total)

total = Math.floor(total)
console.log(“We take the floor to get “+total)

total = total / 100
console.log(“We divide again to get the right value “+total)

<p>We could have calculated the clean total in one step.  The program below does exactly the same calculations as the one above, but it’s a bit harder to explain. Can you see how it does the same calculations?

<code>
let purchase = prompt("How much is your item?")
purchase = Number(purchase)     // convert to a Number

let salesTax = purchase * 0.13
let total = Math.floor((purchase + salesTax) * 100)/100
console.log("You must pay " + total)


<p>But we are not done.  Notice that [`Math.floor()`|math dot floor] simply chops, but we don’t always ‘chop’ in real life, we ‘round’.  We look at the next digit and round DOWN if it is 0 to 4, and round UP if it is 5 to 9.  A value of [.554|point five five four] is rounded DOWN to [.55|point five five] but a value of [.555|point five five five] is rounded up to [.56|point five six].  

<p>So here’s the challenge.  Using [`Math.floor()`|math dot floor], change the program below so that we calculate a new value [_willPay_|will pay] for `purchase` that is exactly what the customer will have to pay after rounding.  It's OK if [willPay|will pay] has fewer than two digits (we can fix later that with another function), but it should not have more.


<code>
let purchase = prompt("How much is your item?")
let taxRate = .13  // 13 percent

// add your code here to calculate
// how much the customer must pay
// after rounding (not chopping)
// the long tail off willPay

console.log("You will pay " + willPay)




<p>Hint: you can add half a cent ([.005|point zero zero five]) before you chop.  So if the amount was [.558|point five five eight] then increase to [.563|point five six three], and then chop it to [.56|point five six]  Does that make sense? 

<br>

<p>To make it even harder, we don’t have pennies anymore in Canada, so we have to round to the nearest nickel. It’s the same trick as rounding the last digit, but this time we have to add five cents, then multiply by 20 before doing a SECOND chop. Then remember to divide by 20 again before we present the final answer.  As above, adding the five cents moves us UP or DOWN, and chop-and-divide brings us back, fixing the problem that [`Math.floor()`|math dot floor] only moves us DOWN.

<p>So [.56|point five six] plus five cents, times 20 becomes [.61|point six one]. Multiply by 20 to get [12.2|twelve point two], chop to twelve, and divide by 20 back to [.55|point five five].  But if we start with [.58|point five eight], plus 5 cents then times 20 gives us [12.6|twelve point six], chop, divide by 20, and we get sixty cents.  

<br>

<p>Sometimes JavaScript doesn’t do exactly what you want.

<p>Add comments into your code, because you will not remember what you were trying to do with some tricky expression.  Add lots of `console.log()` statements so you can see the internal values.  Think about what values are good for testing, so that your program always gives the right answer.

<br>

<p>Once you are finished, you might want to hunt the internet for a JavaScript function that rounds exactly the way you want. 

<p>And don’t hesitate to ask for help.  We are looking forward to seeing your solution.s



<p(h2)>Conditions 

<p>JavaScript has a _Boolean_ type, which has just two possible values: _true_ and _false_. We write the keywords  _true_ and _false_ (without quotes).  Remember to open the JavaScript console with [CTRL+SHIFT+J|control plus shift j] before you try this code.
<code>
console.log(true)
console.log(false)

<p>These _true_ and _false_ values are super useful because your programs can make simple decisions based on them.  We call an expression that evaluates to _true_ or _false_ to be a _condition_

<p>A useful condition is whether one number is bigger than another. The [`>`|greater than] and [`<`|less than] operators are the traditional symbols for "greater than" and "less than".  Asking whether a value "is greater than" another value will produce  _true_ or _false_.

<code>
let mysteryValue = 3            // ok, not much of a mystery
console.log(mysteryValue > 2)   // three is GREATER THAN two
// true
console.log(mysteryValue < 2)	// three is LESS THAN two
// false

<p>We  use the [_==_|] (‘Equals’) operator to decide whether two values are equal.
<p>'Equals' uses TWO equal signs.  Remember that the 'get' operator was ONE equal sign.  Can you see the difference between the 'gets' and 'equals' below?Run this program, and then fix it.
<code>
let weCanCount = ( 2 + 2 == 5 )	// weCanCount will point to a ‘Boolean’ type
console.log( "It is " + weCanCount + " that we can count." )
// run this, and then fix it


<p>Just to be clear, comparison operators produce a new _value_ with _Boolean_ _type_ from values of other types, just as arithmetic operators did with _Numbers_,   All the stuff we did with bindings is exactly the same  In the following code, the brackets are just for clarity.  
<code>
let ourAnswer  = ( 2 + 2	 )			// creates a Number value
let weCanCount = ( 2 + 2 == 5 )		// creates a Boolean value
console.log(ourAnswer, weCanCount)

<p>Other comparison operators are [`>=`|] (greater than or equal to), [`<=`|] (less than or equal to), [`==`|] (equal to), and [`!=`|] (not equal to).

<code>
console.log(10 == 5 + 5)		// equal to ?
// true
console.log(10 <= 5 + 5)		// less than or equal to ?
// true
console.log(10 >= 5 + 5)		// greater than or equal to ?
// true
<p>Now that we know about conditions, we can use them to steer our programs.
<p(h2)>if (condition) {statements}

<p(img=if.jpg)>The `if` statement evaluates the condition in brackets, and then executes a block of statement "wrapped" in  _curly braces_ ([`{`|open curly] and [`}`|close curly]) if that condition is true.

<p>Run this program, see what it does, then change the condition to `2 + 2 = 5` and see what happens.

<code>
if(2 + 2 == 4){     // check whether this is true
	  console.log("Right. ");
	  console.log("This computer can count.")
}
console.log("This is the statement AFTER the 'if'.")

<p>If the condition was _true_, we executed the code in the curly braces, otherwise we skipped over that code.  Optionally we can add an _else_ after the closing curly and put another block in curly braces to execute if the _condition_ is false.  Try this, and then change the condition to something false.
<code>
if(2 + 2 == 4){     // check whether this is true
	  console.log("Right. ");
	  console.log("This computer can count.")
}else{
	  console.log("Bleech. ");
	  console.log("This computer cannot count.")
}
console.log("This is the statement AFTER the 'if'.")




<p(h2)>Curly Braces {}
<p>This is a quick detour here to talk about the _curly braces_ ([`{`|open curly] and [`}`|close curly]).

<p>A _statement_ can be a single statement, or a _block_ of many statements  "wrapped" in _curly braces_.  This is a really important idea.   Whatever is in the curly brackets is just a SINGLE statement, even if it is a thousand pages of code.  

<p>Run this little program, and then take out the curly braces and run it again.  Something weird happened.

<code>
console.log(“statement 1”)
if (2+2 == 4){
	console.log(“statement 2”)
	console.log(“statement 3”)
}
console.log(“statement 4”)

<p>If you leave out the _curly braces_, you can still put in ONE line of code.  But that's a really easy way to make mistakes, and better programmers always use curly braces.  Our little editor will give you a warning if you don’t.

<p>We put spaces on the left side (called ‘indents’) to make our program mores readable, but JavaScript doesn't look at how you format a program.  So it’s really easy to make a mistake without curly braces, and you should always use them.

<br>
<p>Let's write a program to help us practice our math. Try this program with both a right and a wrong answer.

<code>
let answer = Number(prompt("What is 5 + 5 ?"))
if(answer == 10){
     console.log("Right.");
} else {
     console.log("Wrong.");
}

<p>We can chain _if_ statements together.  Let's make our program a little bit smarter and give the user a second try.

<code>
let answer = Number(prompt("What is 5 + 5 ?"))
if(answer == 10){
     console.log("Right.");
} else {
     answer = Number(prompt("Wrong.  Please try again.  What is 5 + 5 ?"))
     if(answer == 10){
          console.log("Right.");
     } else {
          console.log("You hare HOPELESS.")
     }
}

<p(h2)>Logical operators

<p>There are three operations that operate directly on _Boolean_ values, - _&&_, _||_, and _!_ which we say as 'and', 'or', and 'not'.  They can be used to "reason" about Booleans.  It's really easy, you build up complicated expressions exactly as you do in English.

<p>We write _AND_ as  `&&` .  It returns  _true_ only if both the values given to it are _true_.  "I like baseball _AND_ ice cream".

<code>
console.log(true && false)
// false
console.log(true && true)
// true

We write _OR_ as  `||` (find the symbol on your keyboard with a little gap that like looks like  ╏).  It returns  _true_  if either the values given to it are _true_.  "I like baseball _OR_ doing my taxes".

<code>
console.log(true || true)
// true
console.log(false || true)
// true
console.log(false || false)
// false

<p>The 'not' operator is written with an exclamation mark (`!`). It simply flips the value given to it. `!true` produces `false` and `!false` gives `true`.  "I do _NOT_ like doing my taxes".

<code>
console.log( ! false )
// true
console.log( ! true )
// false


<p>JavaScript has rules of precedence for these operators, just like the 'multiplication before addition' rule.   Usually JavaScript can guess what you want, but you should add brackets when there is any doubt.


<p(h2)>Binding Scope
<p>There’s one other important think to know about _curly braces_.  If you define a binding OUTSIDE a code block, then it is visible INSIDE that code block (as you expect.  But bindings from inside a code block are NOT visible outside it.

<p>When you are an expert programmer, you will think this is a great idea.  But for now it is a trap that catchs beginners again and again.

<code>
let first = “First is visible ...”
console.log (first + “outside”) 
if(true){
	console.log (first + “inside”)
	let second = “Second is visible “ 
	console.log (second + “inside”)
}
console.log (first + “outside”)
console.log (second + “outside”)  // error here…

<p>And if you accidentally create a new binding inside the code block with the same same, both bindings will exist and you won’t be sure which one you have. Look at the last line of this code, and see whether it does what you expect when you run it.

<code>
let first = “First is visible ...”
console.log (first + “outside”) 
if(true){
	let first = “I am not really First “ 
	console.log (first + “inside”)
}
console.log (first + “outside”)

























///////////////////////////////////////////////
///////////////////////////////////

<p>JavaScript only has one type of number, a double-precision 64-bit floating-point value called ^Number^ (with a capital 'N').   It is almost ideal for casual programming, graphics, and writing games.

<p>Most programming languages have many ^types^ of numbers, in different sizes and with different precisions and behaviors. The [c++ | c plus plus] language has eleven different [types of numbers| types of numbers| https://en.cppreference.com/w/cpp/language/types].  

<p>JavaScript's single ^Number^ is both good news and bad news.  The good is that we only have to learn one set of behaviors. The bad is that some of those behaviors are troublesome.  We need to understand the limits of ^Number^, and what we can and cannot do with it.









<break>


<p>At a minimum, a language needs at least two types of numbers, an exact-counting number type for controlling loops (often called #Integer#) and a calculator-arithmetic number type for calculations (often called #Float# for 'floating point').  

<p>JavaScript's ^Number^ is a #Float# under the covers, but can be coerced into acting like an #Integer#.  The browser running your program tries to guess which you need and make ^Number^ behave properly.  










<break>
<p(science)>In 2020, JavaScript added a second ^type^ of number called [^Bigint^|big int|https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt], similar to Python's unlimited-precision #Integer#.  

<p>But unlike Python's Integer, our ^Bigint^ isn't yet properly integrated, it's like an extra accessory hung in a bag outside the language.  We are going to stick to ^Number^ in this course.




















<p(h2)>The Versatile Floating Point
<p>This section will feel like #too much information#.  Don't worry about the details.

  
<p>JavaScript only supports one ^type^ of number called ^Number^ . Other languages might call this a #Double# (short for #Double Precision Floating Point#).  It can represent huge numbers, tiny numbers, fractions, integers, and [Unicode| uni code| https://home.unicode.org/] characters.  





<p(img=float.png)>Internally, JavaScript keeps 53 bits to represent the number and 11 bits to represent the scale of the number, plus one more for the sign.   


<p>Scientists often represent numbers in [#Scientific Notation# | scientific notation | https://www.mathsisfun.com/numbers/scientific-notation.html].  

A number written as [`3.25 * 10<sup>9</sup>`| 3 point 2 5 times 10 to the 9] means 3,250,000,000.  The first number holds the significant digits. The second number is 10 to a power, meaning how much to shift the decimal place left or right. If the power is negative, then the value is between zero and one.

<break>
<p(img=scientific_notation.png)>The wonderful thing about Scientific Notation is how easy it is to process.  If you want to multiply two crazy numbers by hand, then simply multiply the significant digits and add the exponents.

<break>
<p>JavaScript's ^Number^ can handle numbers up to [10<sup>-300</sup>|ten to the minus three hundred] (a 1 with 300 zeros after it), and as small as [10<sup>+300</sup>|ten to the three hundred], with 15 to 17 digits of accuracy.  There are only [10<sup>80</sup>|ten to the eighty] atoms in the universe., so that's surely more than you will ever need.

<p>The 15 digits of accuracy is perfect for writing games.  If a game character threw an axe across a high-resolution screen, its position would be updated hundreds of times before it got to the other side, with each update introducing rounding errors.  These cumulative errors would become visible to the eye with only single-precision numbers, but will appear flawless with JavaScript's double-precision.








<p(h2)>But Not Exact

<p>Here's a program that takes a sample group of 1000, computes ten percent of them (100), and then twenty percent of the remainder.  The answer should be exactly 20.  

<p>And it is exactly 20, if you multiply 1000 * 10% * 20%.

<p>But if you do the calculations in a different order, you might find a rounding error.  Try this little program.

<code>
let sampleSize = 1000
let tenPcent = .1
let twentyPcent = .2

console.log(sampleSize * tenPcent * twentyPcent)    // 20
console.log(tenPcent * twentyPcent * sampleSize)    // 20.0000000000000004


<p>Of course, you might say the second answer is close enough. But there are some problems.  An `if()` statement testing the number of people left in the sample might fail, because 20 is #not# the same as 20.0000000000000004.  And what are you going to do with that extra part of a person?

<p>And the worst thing is that two calculations give different answers just depending on the order in which you calculate.  That seems very unpredictable.  

<break>

 A Number only keeps about 17 decimal places of precision; arithmetic is subject to rounding. The largest value a Number can hold is about 1.8×10308. Numbers beyond that are replaced with the special Number constant Infinity.





<p(h2)>Integers
<p>Often we need counting numbers: 0,1,2,3,4, and so on. These are called ^Integers^.  Some types of integers do not allow negative numbers, but JavaScript does.  

<p>Integers are stored as bit patterns in the lower 52 bits of the 64-bit ^Number^.  In JavaScript, we can manipulate numbers between -9,007,199,254,740,991 and 9,007,199,254,740,991 (about 9 quadrillion), as long as we are careful.  

<p>That's probably more than you will need for games, but not nearly enough for many applications.




<break>
<p>The great advantage of ^Integers^ is that they represent values EXACTLY, and can be compared EXACTLY.  Six divided by two is exactly three.   

<p>In JavaScript, you can force

But watch out.  Because when doing #Integer# division, the computer just discards any remainder. Seven divided by two is exactly three, too.  Since there isn't an ^Integer^ between three and four, the ^Integer^ answer will be three.

<code>

console.log(6 / 3 |0)      // exactly 2, no surprise
console.log(7 / 3 |0)   // exactly 2, 



<p>That doesn't happen in JavaScript, we don't have a real ^Integer^.  The computer will 'convert' our answer to a ^Float^.  In reality, every number in JavaScript is always a ^Float^, JavaScript usually gives us the answer we expect, but not always.


<break>The basic arithmetic operations on ^Number^ are addition (`+`), subtraction (`-`), multiplication (`*`), division (`/`), remainder (`%`), exponentiation(`**`), increment (`++`) and decrement(`--`).

<p>Division is the dangerous one.  Assuming your numbers aren't crazy big, you can add, subtract, multiply, etc, to your heart's [content|con tent].  


<p>Remainder (^%^) is the 'clock arithmetic' function.  You have probably never used it outside of classroom exercises, but it is a great tool for programmers.  Since I called it the 'clock arithmetic' function, you probably twigged that we can use it for computing clock time.  It's 11 o'clock now, what time will it be in 3 hours?
<code>
let now = 11
let then = (11 + 3) % 12
console.log("It will be ", then, "o'clock")  // it will be 2 o'clock




<break>
<p(img=binary1.png)>There are many ways to write an ^Integer^.  Of course, you can just write `let a = 5`.  But you can also tell the compiler that you want a specific bit pattern.  In JavaScript, the leading ^0b^ tells the compiler that you are writing a ^binary^ number.  On the right, you can see the first eight binary numbers.  











<break>
<p(history)>Humans count in ^base 10^ or 'decimal' numbers, likely because we have 10 fingers to count on.  Computers have only two fingers, zero and one, so they use ^base 2^ or [^binary numbers^ | binary numbers | https://www.mathsisfun.com/binary-number-system.html]. 
<p>Programmers count from ^zero^.  But zero wasn't invented until [about 700 AD| about 7 hundred a d|https://en.wikipedia.org/wiki/Brahmagupta], and it took a while to catch on, so traditionalists still count from one.


<break>

<p(img=bridge.jpg)>Remember that everything in a computer represented as ones and zeros.  The 52 bits in a JavaScript ^Number^ can be manipulated as bits. 
<p>That's really neat because you can store things that aren't numbers. Imagine storing a bridge hand (13 cards out of a deck of 52) as 13 bits out of the 52 available in a single number (all four hands would require four numbers).


<break>
<p(science)>There are several ways to represent negative numbers in ^integers^.  Languages with proper integers use ^2's complement^ numbers [(see here)| see here| https://www.electronics-tutorials.ws/binary/signed-binary-numbers.html]  to avoid having both positive and negative zero.  
<p>JavaScript has both a positive and negative zero.  Luckily you don't have to worry in most cases, because they are considered equal.

<break>

<p>The important thing about counting with integers is that they are only 'whole' numbers. You can count 2 or 3. But you cannot count [2.5 | 2 and a half].  















<break>
<p>But it is all we have, so we are going to understand it.  So we are going to And we are going to do that by 




<break>
<p(science)>Since 2020, we have a second type of number in Javascript called `Bigint`.  





<youtube>https://www.youtube.com/embed/SjSHVDfXHQ4





<break>
<p(science)>The CPU in your laptop is optimized for 64-bit #Floats#, but the graphics processor doesn't need all that precision.  It does however need speed, and smaller numbers can be computed faster. The speed benefits are worth the effort of writing the specialized code required.

<p>We measure the speed of calculations in [#TFLOPS#|Terra Flops] (Trillion Floating Point Instructions per Second). As I write this (Spring 2021), an [AMD Radeon Instinct MI160|A M D Radeon Instinct M I 1 60|https://www.amd.com/system/files/documents/radeon-instinct-mi60-datasheet.pdf] can perform up to [7.4|7 point 4] [TFLOPS|Terra Flops] with 64-bit precision, [14.7|14 point 7] TFLOPS with 32-bit precision, and a stunning [29.5|29 point 5] [TFLOPS|Terra Flops] in 16-bit precision.  If you don't need the precision, you can go four times faster with 16-bit than with 64-bit.

<p(img=ASCIWhite01.jpg)>Two decades ago, the fastest supercomputer on the planet was a machine called [#ASCI WHITE#|ascii white|https://www.top500.org/resources/top-systems/asci-white-lawrence-livermore-national-laboratory/]. It cost about [$160M US|one hundred sixty million buck u s] in current dollars, weighed 106 tons, and consumed more electricity than a small city.  It could manage [12.3|12point3] [TFLOPS|Terra Flops].



