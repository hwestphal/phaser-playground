<title>Boolean values
<p>JavaScript has a _Boolean_ type, which has just two possible values: _true_ and _false_. We write the keywords  _true_ and _false_ (without quotes).  Remember to open the JavaScript console with [CTRL+SHIFT+J|control plus shift j] before you try this code.
<cm>
console.log(true)
console.log(false)

<p>These _true_ and _false_ values are super useful because your programs can make simple decisions based on them.  We call an expression that evaluates to _true_ or _false_ to be a _condition_

<p>A useful condition is whether one number is bigger than another. The [`>`|greater than] and [`<`|less than] operators are the traditional symbols for "greater than" and "less than".  Asking whether a value "is greater than" another value will produce  _true_ or _false_.

<cm>
let mysteryValue = 3            // ok, not much of a mystery
console.log(mysteryValue > 2)   // three is GREATER THAN two
// true
console.log(mysteryValue < 2)	// three is LESS THAN two
// false

<p>We  use the [_==_|] (‘Equals’) operator to decide whether two values are equal.
<p>'Equals' uses TWO equal signs.  Remember that the 'get' operator was ONE equal sign.  Can you see the difference between the 'gets' and 'equals' below?Run this program, and then fix it.
<cm>
let weCanCount = ( 2 + 2 == 5 )	// weCanCount will point to a ‘Boolean’ type
console.log( "It is " + weCanCount + " that we can count." )
// run this, and then fix it


<p>Just to be clear, comparison operators produce a new _value_ with _Boolean_ _type_ from values of other types, just as arithmetic operators did with _Numbers_,   All the stuff we did with bindings is exactly the same  In the following code, the brackets are just for clarity.  
<cm>
let ourAnswer  = ( 2 + 2	 )			// creates a Number value
let weCanCount = ( 2 + 2 == 5 )		// creates a Boolean value
console.log(ourAnswer, weCanCount)

<p>Other comparison operators are [`>=`|] (greater than or equal to), [`<=`|] (less than or equal to), [`==`|] (equal to), and [`!=`|] (not equal to).

<cm>
console.log(10 == 5 + 5)		// equal to ?
// true
console.log(10 <= 5 + 5)		// less than or equal to ?
// true
console.log(10 >= 5 + 5)		// greater than or equal to ?
// true
<p>Now that we know about conditions, we can use them to steer our programs.
<subtitle>if (condition) {statements}

<img>images/if.jpg
<p>The `if` statement evaluates the condition in brackets, and then executes a block of statement "wrapped" in  _curly braces_ ([`{`|open curly] and [`}`|close curly]) if that condition is true.

<p>Run this program, see what it does, then change the condition to `2 + 2 = 5` and see what happens.

<cm>
if(2 + 2 == 4){     // check whether this is true
	  console.log("Right. ");
	  console.log("This computer can count.")
}
console.log("This is the statement AFTER the 'if'.")

<p>If the condition was _true_, we executed the code in the curly braces, otherwise we skipped over that code.  Optionally we can add an _else_ after the closing curly and put another block in curly braces to execute if the _condition_ is false.  Try this, and then change the condition to something false.
<cm>
if(2 + 2 == 4){     // check whether this is true
	  console.log("Right. ");
	  console.log("This computer can count.")
}else{
	  console.log("Bleech. ");
	  console.log("This computer cannot count.")
}
console.log("This is the statement AFTER the 'if'.")





<subtitle>Curly Braces {}
<p>This is a quick detour here to talk about the _curly braces_ ([`{`|open curly] and [`}`|close curly]).

<p>A _statement_ can be a single statement, or a _block_ of many statements  "wrapped" in _curly braces_.  This is a really important idea.   Whatever is in the curly brackets is just a SINGLE statement, even if it is a thousand pages of code.  

<p>Run this little program, and then take out the curly braces and run it again.  Something weird happened.

<cm>
console.log(“statement 1”)
if (2+2 == 4){
	console.log(“statement 2”)
	console.log(“statement 3”)
}
console.log(“statement 4”)

<p>If you leave out the _curly braces_, you can still put in ONE line of code.  But that's a really easy way to make mistakes, and better programmers always use curly braces.  Our little editor will give you a warning if you don’t.

<p>We put spaces on the left side (called ‘indents’) to make our program mores readable, but JavaScript doesn't look at how you format a program.  So it’s really easy to make a mistake without curly braces, and you should always use them.

<br>
<p>Let's write a program to help us practice our math. Try this program with both a right and a wrong answer.

<cm>
let answer = Number(prompt("What is 5 + 5 ?"))
if(answer == 10){
     console.log("Right.");
} else {
     console.log("Wrong.");
}

<p>We can chain _if_ statements together.  Let's make our program a little bit smarter and give the user a second try.

<cm>
let answer = Number(prompt("What is 5 + 5 ?"))
if(answer == 10){
     console.log("Right.");
} else {
     answer = Number(prompt("Wrong.  Please try again.  What is 5 + 5 ?"))
     if(answer == 10){
          console.log("Right.");
     } else {
          console.log("You hare HOPELESS.")
     }
}



<subtitle>while (condition) {statements}

<p>Here's a program that outputs the first 10 numbers from 0 to 9.  (Programmers like to count from zero.)  Try it.

<cm>
console.log(0);
console.log(1);
console.log(2);
console.log(3);
console.log(4);
console.log(5);
console.log(6);
console.log(8);
console.log(9);

<p>That works, but it's pretty stupid.  And because we mistyped, we forgot the '7'.

<p>We can do the same thing with a `while` loop.  Try it.  Try playing with it, you will immediately figure out what it does.

<cm>
let count = 0
while (count <= 10){
  console.log(count)
  count = count + 1
}

<img>images/while.jpg
<p>The `while` statement evaluates the condition in brackets, and then executes a block of statement "wrapped" in  _curly braces_ (`{` and `}`) while that condition is _true_.

<p>That is exactly the same sentence we used to describe `if`, except we replaced 'if' with `while`.

<p>So repeating what we said for `if`, we use the _curly braces_ to "wrap" the code in the loop.  If we leave them out then we can still run ONE statement, but good programmers ALWAYS put them in.

<p>The `while` checks the `condition` at the top each time around.  If the condition is false going in the first time, the statements will not be executed.  There must be something in the loop that changes the condition, or the loop will execute forever.   Well, not forever.  Usually until you shut the browser or reboot your computer.  It’s a common mistake that even experience programmers make.

<br>


<p>A very common programming patter n is to put an _if_ inside a _while_.   For example, let's write a program that finds the factors of a number (numbers that can divide that number without a remainder).  For 12, the factors are 1, 2, 3, 4, 6, and 12.

<p>We ask for the number using a `prompt()`.  We then set `possible` to 1, and try it.  Remember that _mod_ function that gave us a remainder?  We can use it here, if the remainder is zero, then the numbers divide exactly.  We stick an `if` condition inside our `while` loop, and we are done.  Try it.  What are the factors of 1749?

<cm>
let factorize = Number(prompt("What number do you want to factor?"))

let possible = 1
while (possible <= factorize) {
  if((factorize % possible) === 0){
      console.log(possible + “ is a factor of “ + factorize)    // it is a factor
     }
  possible = possible + 1
}
console.log("done")

<p>You can get a feeling for how fast your computer is by factorizing in a random 7-digit or 8-digit number.  But big numbers get big fast, if you put in an 11-digit or 12 digit number then you will be waiting days for this program to finish.
<br>
<p>It’s time to write a game, and here is one of my favorites.  Try it out.
<cm>
let count = 0
while(count < 10){
	count = count +1
	let name = prompt(“Give me the name of someone you know.”)
	if(name == “Tom”){
		console.log(“Tom is a wonderful guy”)
	}else{
		console.log(name + “ is a doo-doo head”)
	}
}
	
<p>I can play this game all day.  Tom, Tom, Tom…  But you probably got bored with it before it ended (Cancel, Cancel, Cancel...). Let’s fix it up.  Let’s make it stop if we simply hit ENTER without entering a name.

<p>We will add a “magic value”I could do that with an _if_, but it’s a bit complicated, because we don’t want to run the doo-doo head code for an empty name.  So we need to initialize name with some “magic value” that won’t stop the program, then test name each time to see if it is our exit condition.  The new game might look like this.
<cm>
let name = “magic value”   // not empty
while(name !== “”){
	name = prompt(“Give me the name of someone you know.”)		
	if (name !==””){
		if(name == “Tom”){
			console.log(“Tom is a wonderful guy”)
		}else{
			console.log(name + “ is a doo-doo head”)
		}
	}
}
<p>It works, but that is a LOT of code for a simple game.
<subtitle>Breaking Out of a Loop

<p>Here's an infinite loop.  STOP.  If you run this program, then you will have to close your browser, and possibly even reboot your computer to continue this lesson.   
  
<cm>
while(true){
    \\ whatever
}

<img>images/break.jpg

<p>But we can break out of that loop with a special statement called `break`.  It has the effect of immediately jumping out of the enclosing loop.  

<p>So here’s the program again.  And it looks much more natural.  It starts with `while(true)` which roughly means “always loop here”.  Then we pull in `name`, without any need for a magic value.  Then the exit condition `if (name ==””){ break }`, all on one line because it is easier to read that way.  Then the heart of this wonderful game.

<cm>
while(true){
	let name = prompt(“Give me the name of someone you know.”)		
	if (name ==””){ break }

	if(name == “Tom”){
		console.log(“Tom is a wonderful guy”)
	}else{
		console.log(name + “ is a doo-doo head”)
	}
}

<p>OK, here’s a more useful game.  It will use a JavaScript function called `Math.random()` that creates a random number.  Let’s look at this random function first. Run this program.
<cm>
let count = 0
while(count < 20){
	count = count + 1
	console.log(Math.random())
}

<p>You can run it again, and you will get different numbers.  Math.random() creates a value between 0 and 1.  Random numbers are really useful for games, and we will talk about them in more detail in another lesson.

<p>For this game, we want whole numbers between 1 and 10.  Luckily we know how to do that. 

<p>First we multiply by 10 so that .5331… becomes 5.331... Then we use Math.floor() so that 5.331… becomes 5.  Now we have numbers between 0 and 9, so we add 1 to get numbers between 1 and 10. Give it  a try.  

<cm>
let count = 0
while(count < 20){
	count = count + 1
	let myRandom = Math.random()
	myRandom = myRandom * 10
	myRandom = Math.floor(myRandom)
	myRandom = myRandom + 1

	console.log(myRandom)
}
<p>Of course, we can bash together [`myRandom`|my random]  in a single expression.  Try it out.  What would you change if you wanted values between 2 and 9?

<cm>
let count = 0
while(count < 20){
	count = count - 1
	let myRandom = Math.floor( Math.random() * 10 ) + 1

	console.log(myRandom)
}

<p>Now let’s write a multiplication drilling game (using values between 2 and 9) 

<cm>
while(true){
	val1 = Math.floor( Math.random() * 9 ) + 2
	val2 = Math.floor( Math.random() * 9 ) + 2
    	let answer = prompt(“what is “ + val1 + “ times “ + val2 + “ ?”)
	if (answer==””) { break }  // exit condition
	
	if(answer == val1*val2){   // test for right answer
		console.log (“Right answer! “)
	}else{
		console.log(“No, it is “ + (val1*val2) + “.  You need more practice.”)
	}
}

<p>A couple of minutes with this, and you are going to be GREAT at multiplication.  

<p>Why don’t you improve this program a bit.  Add a counter that tells you how many right answers you have made in a row (reset to zero at a wrong answer).  Or set it up so that it asks exactly 10 questions and then gives you a score.

<img>fib.png
<p>The Fibonacci sequence starts with the numbers 0 and 1. Following numbers are the sum of the previous two.  So the first elements of the Fibonacci sequence are:
<pre>
0, 1, 1, 2, 3, 5, 8, 13,21,34, 55,89, 144…

<p>This simple sequence pops up unexpectedly in math, physics, economics, demographics, architecture, and many other fields. It describes how rabbit populations grow and how artichokes position their leaves.  

<p>Let’s write a program to print the first 20 Fibonacci numbers. I’ll do the framework, and you do the loop.  Check the result against the sequence above, and then maybe change it to print the first 500 or 5000 Fibonacci numbers.

<p>you are going to create a binding, maybe called `fib`, that is the sum of `fTwoBack` and `fOneBack`, and print it out.  Then you are going to move `fOneBack` to `fTwoBack` and move `fib` to `fOneBack`, and then loop.  As you are editing, think about how this will generate a sequence of numbers.
  
<cm>
let count = 0
let fTwoBack = 0
let fOneBack = 1

while(count < 20){
	count = count + 1

	// your code here

}

<p>

<subtitle>continue

<img>images/continue.jpg
<p>The _continue_  keyword is the opposite of _break_. It cause the computer to jump out of the loop body and back to the top, to continue with the next loop.  Watch out, you need to make sure you bump your loop counter BEFORE the _continue_ or  you will land in an infinite loop.
<subtitle>Challenge Problem

<p>We are at the end of this lesson, and we know enough JavaScript to write some powerful games.  That is exactly what we are going to do in the next lesson.  But first, you are going to write a prime number generator.

<p>Prime numbers have fascinated mathematicians for centuries.  They are the building blocks of our number system. Factoring large prime numbers is insanely complicated, and almost all internet security depends on that.  There are thousands of mathematicians and computer scientists working on understanding prime numbers.

<p>But the basics are pretty easy. Prime numbers can only be divided by themselves and 1.  So 2 is prime, but every larger even number can be divided by 2 and therefore is not prime.  3, 5, and 7 are prime. But 9 can be divided by 3 and so is not prime.   Here are the first few prime numbers:
<pre>
2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199
<p>Here’s a link to a list of the [<a href=”https://primes.utm.edu/lists/small/millions/”>first 50 million prime numbers</a>|first 50 million prime numbers].  There were celebrations when someone recently found a prime number with th 23,249,425 digits [<a href = ”https://www.mersenne.org/primes/press/M77232917.html” >(here)</a>|here].  They really are that important.
<p>We are going to calculate the primes up to 200.  They are listed above, so you can check your code. Then you can change it if you like to calculate as many as you like.
<p>Again, I’ll provide the stub.  You fill in the middle
<cm>
let candidate = 1
outerLoop: while(candidate < 200) {
	candidate = candidate + 2 // don't bother with even numbers
	let possibleFactor = 2
   	// if possibleFactor squared is greater than candidate, it is no longer possible
	while(possibleFactor * possibleFactor < candidate) {		
		if(candidate % possibleFactor == 0)	// divisible, so not prime
			{ continue outerLoop }
      	possibleFactor = possibleFactor + 1
	}
	console.log(candidate)   // candidate has passed all tests, it is prime
}
console.log("done")


<p>======================
<p>And there is a really dangerous booby-trap in the program.  The binding `answer` was created outside the loop, and that's the one the loop tests.  If by mistake you said `let answer = prompt(...` inside the loop, then you would have created a DIFFERENT binding `answer` inside the loop from th one outside.

<p>And since you are testing the OUTSIDE binding in the `while()`, you would have created an infinite loop.  Try it in this mini-program that we can rescue you from.  Try it, add a 'let' to the inside `answer`, and try it again.


<cm>
let answer = 0
while (answer == 0){
  let answer = 1    // should get us out of the loop, except...
}

<p>Here's another way.

<subtitle>Breaking Out of a Loop


<cm>
while (true){
    let value1 = Math.floor(Math.random() * 9) + 1
    let value2 = Math.floor(Math.random() * 9) + 1
    let feedback = ""
    let answer = prompt(feedback + "What is " + value1 + " times " + value2)

    if(answer == "") {break}   // exit while loop

    if(Number(answer) == value1 * value2){
      	feedback = "Right. ";
    } else {
        feedback = "Wrong. ";
    }
}


<p>This program illustrates the `break` statement. It finds the first number that is both greater than or equal to 20 and divisible by 7.

<cm>
for (let current = 20; ; current = current + 1) {
  if (current % 7 == 0) {
    console.log(current);
    break;
  }
}
//  21



<p>Using the remainder (`%`) operator is an easy way to test whether a number is divisible by another number. If it is, the remainder of their division is zero.

<p>The `for` construct in the example does not have a part that checks for the end of the loop. This means that the loop will never stop unless the `break` statement inside is executed. If you were to remove that `break` statement or you accidentally write an end condition that always produces `true`, your program would get stuck in an _((infinite loop))_. A program stuck in an infinite loop will never finish running, which is usually a bad thing.

<p>If you create an infinite loop in one of the examples on these pages,
you'll usually be asked whether you want to stop the script after a
few seconds. If that fails, you will have to close the tab that you're
working in, or on some browsers close your whole browser, in order to
recover.




<subtitle>Summary

<p>You now know that a program is built out of statements, which
themselves sometimes contain more statements. Statements tend to
contain expressions, which themselves can be built out of smaller
expressions.

<p>Putting statements after one another gives you a program that is
executed from top to bottom. You can introduce disturbances in the
flow of control by using conditional (`if`, `else`, and `switch`) and
looping (`while`, `do`, and `for`) statements.

<p>Bindings can be used to file pieces of data under a name, and they are
useful for tracking state in your program. The environment is the set
of bindings that are defined. JavaScript systems always put a number
of useful standard bindings into your environment.


<subtitle>Exercises

<p>Each exercise starts with a problem description. Read that and try to
solve the exercise.
<p>You can ask for help at any time.  But if you want to learn something from the exercises,
then attack the problem long and hard enough, until you have a slight
headache.  We have covered a lot of ground, and this isn't easy stuff.

<subtitle>Looping a triangle

<p>Write a loop that makes seven calls to `console.log` to output the
following triangle:

<pre>
#
##
###
####
#####
######
#######

It may be useful to know that you can find the length of a string by
writing `.length` after it:

<pre>
let abc = "abc";
console.log(abc.length);
//  3

Most exercises contain a piece of code that you can modify to solve
the exercise. Remember that you can click code blocks to edit them.

<cm>
// write the triangle exercise here
//


{{hint

{{index "triangle (exercise)"}}

You can start with a program that prints out the numbers 1 to 7, which
you can derive by making a few modifications to the [even number
printing example](program_structure#loops) given earlier in the
chapter, where the `for` loop was introduced.

Now consider the equivalence between numbers and strings of hash
characters. You can go from 1 to 2 by adding 1 (`+= 1`). You can go
from `"#"` to `"##"` by adding a character (`+= "#"`). Thus, your
solution can closely follow the number-printing program.

hint}}

#<subtitle>FizzBuzz

{{index "FizzBuzz (exercise)", loop, "conditional execution"}}

Write a program that uses `console.log` to print all the numbers from
1 to 100, with two exceptions. For numbers divisible by 3, print
`"Fizz"` instead of the number, and for numbers divisible by 5 (and
not 3), print `"Buzz"` instead.

When you have that working, modify your program to print `"FizzBuzz"`,
for numbers that are divisible by both 3 and 5 (and still print
`"Fizz"` or `"Buzz"` for numbers divisible by only one of those).

(This is actually an ((interview question)) that has been claimed to
weed out a significant percentage of programmer candidates. So if you
solved it, your labor market value just went up.)

{{if interactive
<cm>
// Your code here.
<cm>
if}}

{{hint

{{index "FizzBuzz (exercise)", "remainder operator", "% operator"}}

Going over the numbers is clearly a looping job, and selecting what to
print is a matter of conditional execution. Remember the trick of
using the remainder (`%`) operator for checking whether a number is
divisible by another number (has a remainder of zero).

In the first version, there are three possible outcomes for every
number, so you'll have to create an `if`/`else if`/`else` chain.

{{index "|| operator", ["if keyword", chaining]}}

The second version of the program has a straightforward solution and a
clever one. The simple way is to add another conditional "branch" to
precisely test the given condition. For the clever method, build up a
string containing the word or words to output and print either this
word or the number if there is no word, potentially by making good use
of the `||` operator.

hint}}

#<subtitle>Chess board

{{index "chess board (exercise)", loop, [nesting, "of loops"], "newline character"}}

Write a program that creates a string that represents an 8×8 grid,
using newline characters to separate lines. At each position of the
grid there is either a space or a "#" character. The characters should
form a chess board.

Passing this string to `console.log` should show something like this:

<cm>{lang: null}
 # # # #
# # # #
 # # # #
# # # #
 # # # #
# # # #
 # # # #
# # # #
<cm>

When you have a program that generates this pattern, define a
((binding)) `size = 8` and change the program so that it works for
any `size`, outputting a grid of the given width and height.

{{if interactive
<cm>
// Your code here.
<cm>
if}}

{{hint

{{index "chess board (exercise)"}}

The string can be built by starting with an empty one (`""`) and
repeatedly adding characters. A newline character is written `"\n"`.

{{index [nesting, "of loops"]}}

To work with two ((dimensions)), you will need a ((loop)) inside of a
loop. Put ((curly braces)) around the bodies of both loops to make it
easy to see where they start and end. Try to properly indent these
bodies. The order of the loops must follow the order in which we build
up the string (line by line, left to right, top to bottom). So the
outer loop handles the lines and the inner loop handles the characters
on a line.


You'll need two bindings to track your progress. To know whether to
put a space or a hash sign at a given position, you could test whether
the sum of the two counters is even (`% 2`).

Terminating a line by adding a newline character must happen after the
line has been built up, so do this after the inner loop but inside of
the outer loop.

hint}}


<cm(proctor)>
// your program here



<subtitle>The environment

<p>Let's review.  _Values_ are chunks of bits that each have a  _types_.  The simple types are _Number_, _String_, and _Boolean_.  A _binding_ is a named tentacle that may point to a _value_.    Are you solid on this?

<p>When a program starts up, there are always existing bindings that are part of JavaScript.  Other bindings help interact with the surrounding system. For example, in a ((browser)), there are functions to interact with the currently loaded website and to read ((mouse)) and ((keyboard)) input.

<p>There are hundreds of functions that you have access to, and we're going to start using them without really understanding them for now.

<p>We've already seen one such function, called `console.log()`.   Here's another one called `prompt()` that shows a little ((dialog box)) asking the user to type something, and passes back that string to your program.

<cm>
let secret = prompt("Enter passcode")
console.log(secret)


<p>Functions seem to be special names followed by brackets (called 'parentheses').  But it's the other way around, the brackets are the important part and the name is just a binding tentacle like any other.

<p>Values in the brackets (called _((argument))s_.) are passed to the function, which does something with them and optionally returns a result.   `prompt()`  has two arguments, the second one is an optional string.  Try adding the second parameter above, and see what it does.




<subtitle>Logical operators

<p>There are three operations that operate directly on _Boolean_ values, - _&&_, _||_, and _!_ which we say as 'and', 'or', and 'not'.  They can be used to "reason" about Booleans.  It's really easy, you build up complicated expressions exactly as you do in English.

<p>We write _AND_ as  `&&` .  It returns  _true_ only if both the values given to it are _true_.  "I like baseball __and__ ice cream".

<cm>
console.log(true && false)
// false
console.log(true && true)
// true

We write _OR_ as  `||` (find the symbol on your keyboard with a little gap that like looks like  ╏).  It returns  _true_  if either the values given to it are _true_.  "I like baseball __or__ doing my taxes".

<cm>
console.log(true || true)
// true
console.log(false || true)
// true
console.log(false || false)
// false

<p>The 'not' operator is written with an exclamation mark (`!`). It simply flips the value given to it. `!true` produces `false` and `!false` gives `true`.  "I do __not__ like doing my taxes".

<cm>
console.log( ! false )
// true
console.log( ! true )
// false


<p>JavaScript has rules of precedence for these operators, just like the 'multiplication before addition' rule.   Usually JavaScript can guess what you want, but you should add brackets when there is any doubt.
<cm>
1 + 1 == 2 && 10 * 10 > 50

<p>Ok, here's a fun trick that you will learn if you study math in university, 'De Morgan's Law' says that a statement 'A and B' can be transformed into an equivalent statement 'not (not A or not B)'.  It is useful in Engineering because it lets you change 'AND' statements ito 'OR' statements, or vice versa.

<p>It sounds crazy hard, but don't be scared.  It's easy to demonstrate in JavaScript.

<cm>
let A = true
let B = false

console.log( (A && B) == !(!A || !B) )
// 'A and B' equals 'not (not A or not B)'

It also works the other way around.

<cm>
let A = true
let B = false

console.log( (A !! B) == !(!A and !B) )
// 'A or B' equals 'not (not A and not B)'



<p>Let's give an example.  A student usually goes to Elementary school until grade 5,then middle dchool until grade 8, then high school.  If we know the grade that the student is in, can we determine whether he goes to middle school?

<p>So maybe we are thinking "He goes to middle school ... if he is NOT in elementary school and he is NOT in high school. That sounds sensible, let's write that as a program.

<cm>
let grade = Number(prompt("What grade is he in?"))
let elementarySchool = grade < 6
let highSchool = grade > 8

let middleSchool = !elementarySchool && !highSchool
console.log("Middle school is " + middleSchool)


<p>Remember prompt() and Number().  We simply combined them into a single expression in the first line.

<p>For the second line, say "Let elementarySchool get grade less-than 6".

<p>We test it with a few different values, and it works just fine.  (Try it.)

<p>So the principal tells the vice principal to stand at the front door and let in all the kids who shouldn't be here.  She should look for - are you ready? - "students who are NOT NOT in elementary school AND NOT in high school)". That sort of sounds like a school rule, doesn't it?

<cm>
let grade = Number(prompt("What grade is he in?"))
let elementarySchool = grade < 6
let highSchool = grade > 8

let intercept = !(!elementarySchool && !highSchool)
console.log("Intercept this student is " + intercept)

<p>The rule is right (try it).

<p>But the vice principal's eyes are desperately rolling in both directions.  Luckily you are there to help her, and you know De Morgan's Law.  You tell her to intercept "Students who are in elementary school OR in high school".

<p>That doesn't even need brackets.  We're going to put both versions in the program, they should always both be _true_ or both be _false_.  Try them.

<cm>
let grade = Number(prompt("What grade is he in?"))
let elementarySchool = grade < 6
let highSchool = grade > 8

let intercept = !(!elementarySchool && !highSchool)
console.log("Intercept this student is " + intercept)

let intercept = elementarySchool || highSchool
console.log("Intercept this student is " + intercept)



<subtitle> Binding names

<p>We used strange-looking names of bindings like `elementarySchool`. Here are the rules.  Binding names can include upper and lower letters, digits, and the dollar sign ("$") and underscore ("&#95;").  But the name must not start with a digit or include other punctuation or special characters.  Watch out that two names with slightly different case are NOT the same.

<cm>
let LongNamesArePerfectlyAcceptable = "Something Important"
console.log(LongNamesarePerfectlyAcceptable)
// lost something important?


<p>You can write programs that look like this one and they are perfectly correct.  But your fellow programmers will think you are an idiot.

<cm>
let ____ = "I"
let _____ = ____ + "D" + ____
let ______ = _____ + "OT"
console.log( ____ + " am an " + ______);


<p>`console.log()` is always lower-case, but `Number()` has a capital N.  That's just the way it is.



<subtitle> Challenge

<p>In ice hockey, a play is offside if a player on the attacking team enters the offensive zone before the puck, and anyone on that player's team touches the puck before it leaves the zone.

<p>Our glorious JavaScript team is playing against the chess club.  Jaden crossed the line before the puck, and then Jada touched it.  Was it 'offside' based on the following information?

<p>To help testing, I've set up four bindings (all _true_).  In this combination, it is NOT offside because the puck left the zone before Jada touched it.  There are 16 possible combinations and your code has to work for every one.

<cm(proctor)>
let weAreAttacking = true
let JadenOnOurTeam = true
let JadaOnOurTeam = true
let puckLeftZone = true    // puck left zone before Jada touched it?

// decode whether the play was offside.  put your code here.
// add as many lines as you need

let offside = true // or false
console.log ("offside " + offside)

<p>You will want to use more than one line of code, and put in your own `console.log()` statements so you can check your logic.





<subtitle>The environment

<p>Let's review.  _Values_ are chunks of bits that each have a  _types_.  The simple types are _Number_, _String_, and _Boolean_.  A _binding_ is a named tentacle that may point to a _value_.    Are you solid on this?

<p>When a program starts up, there are always existing bindings that are part of JavaScript.  Other bindings help interact with the surrounding system. For example, in a ((browser)), there are functions to interact with the currently loaded website and to read ((mouse)) and ((keyboard)) input.

<p>There are hundreds of functions that you have access to, and we're going to start using them without really understanding them for now.

<p>We've already seen one such function, called `console.log()`.   Here's another one called `prompt()` that shows a little ((dialog box)) asking the user to type something, and passes back that string to your program.

<cm>
let secret = prompt("Enter passcode")
console.log(secret)


<p>Functions seem to be special names followed by brackets (called 'parentheses').  But it's the other way around, the brackets are the important part and the name is just a binding tentacle like any other.

<p>Values in the brackets (called _((argument))s_.) are passed to the function, which does something with them and optionally returns a result.   `prompt()`  has two arguments, the second one is an optional string.  Try adding the second parameter above, and see what it does.




<subtitle>Logical operators

<p>There are three operations that operate directly on _Boolean_ values, - _&&_, _||_, and _!_ which we say as 'and', 'or', and 'not'.  They can be used to "reason" about Booleans.  It's really easy, you build up complicated expressions exactly as you do in English.

<p>We write _AND_ as  `&&` .  It returns  _true_ only if both the values given to it are _true_.  "I like baseball AND ice cream".

<cm>
console.log(true && false)
// false
console.log(true && true)
// true

We write _OR_ as  `||` (find the symbol on your keyboard with a little gap that like looks like  ╏).  It returns  _true_  if either the values given to it are _true_.  "I like baseball OR doing my taxes".

<cm>
console.log(true || true)
// true
console.log(false || true)
// true
console.log(false || false)
// false

<p>The 'not' operator is written with an exclamation mark (`!`). It simply flips the value given to it. `!true` produces `false` and `!false` gives `true`.  "I do __not__ like doing my taxes".

<cm>
console.log( ! false )
// true
console.log( ! true )
// false


<p>JavaScript has rules of precedence for these operators, just like the 'multiplication before addition' rule.   Usually JavaScript can guess what you want, but you should add brackets when there is any doubt.
<cm>
1 + 1 == 2 && 10 * 10 > 50

<p>Ok, here's a fun trick that you will learn if you study math in university, 'De Morgan's Law' says that a statement 'A and B' can be transformed into an equivalent statement 'not (not A or not B)'.  It is useful in Engineering because it lets you change 'AND' statements ito 'OR' statements, or vice versa.

<p>It sounds crazy hard, but don't be scared.  It's easy to demonstrate in JavaScript.

<cm>
let A = true
let B = false

console.log( (A && B) == !(!A || !B) )
// 'A and B' equals 'not (not A or not B)'

It also works the other way around.

<cm>
let A = true
let B = false

console.log( (A !! B) == !(!A and !B) )
// 'A or B' equals 'not (not A and not B)'



<p>Let's give an example.  A student usually goes to Elementary school until grade 5,then middle dchool until grade 8, then high school.  If we know the grade that the student is in, can we determine whether he goes to middle school?

<p>So maybe we are thinking "He goes to middle school ... if he is NOT in elementary school and he is NOT in high school. That sounds sensible, let's write that as a program.

<cm>
let grade = Number(prompt("What grade is he in?"))
let elementarySchool = grade < 6
let highSchool = grade > 8

let middleSchool = !elementarySchool && !highSchool
console.log("Middle school is " + middleSchool)


<p>Remember prompt() and Number().  We simply combined them into a single expression in the first line.

<p>For the second line, say "Let elementarySchool get grade less-than 6".

<p>We test it with a few different values, and it works just fine.  (Try it.)

<p>So the principal tells the vice principal to stand at the front door and let in all the kids who shouldn't be here.  She should look for - are you ready? - "students who are NOT NOT in elementary school AND NOT in high school)". That sort of sounds like a school rule, doesn't it?

<cm>
let grade = Number(prompt("What grade is he in?"))
let elementarySchool = grade < 6
let highSchool = grade > 8

let intercept = !(!elementarySchool && !highSchool)
console.log("Intercept this student is " + intercept)

<p>The rule is right (try it).

<p>But the vice principal's eyes are desperately rolling in both directions.  Luckily you are there to help her, and you know De Morgan's Law.  You tell her to intercept "Students who are in elementary school OR in high school".

<p>That doesn't even need brackets.  We're going to put both versions in the program, they should always both be _true_ or both be _false_.  Try them.

<cm>
let grade = Number(prompt("What grade is he in?"))
let elementarySchool = grade < 6
let highSchool = grade > 8

let intercept = !(!elementarySchool && !highSchool)
console.log("Intercept this student is " + intercept)

let intercept = elementarySchool || highSchool
console.log("Intercept this student is " + intercept)



<subtitle> Binding names

<p>We used strange-looking names of bindings like `elementarySchool`. Here are the rules.  Binding names can include upper and lower letters, digits, and the dollar sign ("$") and underscore ("&#95;").  But the name must not start with a digit or include other punctuation or special characters.  Watch out that two names with slightly different case are NOT the same.

<cm>
let LongNamesArePerfectlyAcceptable = "Something Important"
console.log(LongNamesarePerfectlyAcceptable)
// lost something important?


<p>You can write programs that look like this one and they are perfectly correct.  But your fellow programmers will think you are an idiot.

<cm>
let ____ = "I"
let _____ = ____ + "D" + ____
let ______ = _____ + "OT"
console.log( ____ + " am an " + ______);


<p>`console.log()` is always lower-case, but `Number()` has a capital N.  That's just the way it is.



<subtitle> Challenge

<p>In ice hockey, a play is offside if a player on the attacking team enters the offensive zone before the puck, and anyone on that player's team touches the puck before it leaves the zone.

<p>Our glorious JavaScript team is playing against the chess club.  Jaden crossed the line before the puck, and then Jada touched it.  Was it 'offside' based on the following information?

<p>To help testing, I've set up four bindings (all _true_).  In this combination, it is NOT offside because the puck left the zone before Jada touched it.  There are 16 possible combinations and your code has to work for every one.

<cm(proctor)>
let weAreAttacking = true
let JadenOnOurTeam = true
let JadaOnOurTeam = true
let puckLeftZone = true    // puck left zone before Jada touched it?

// decode whether the play was offside.  put your code here.
// add as many lines as you need

let offside = true // or false
console.log ("offside " + offside)

<p>You will want to use more than one line of code, and put in your own `console.log()` statements so you can check your logic.
