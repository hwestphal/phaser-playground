<title>Hello World
<key>01_00
<shortdesc>basic types, variables, statements,input, print


<p>Welcome.  This is the first lesson, the first step on a long but wonderful journey.

<p>We start every lesson by telling you what we hope you will learn. It is good to check back and
ask yourself what you have actually learned, and we're going to help you do that.

<p>This lesson will tell you about a computer language that we are going to use, called 'JavaScript'.  We are going to
look at the basic types of data that we can handle, and then write some simple programs.

<p(betty)> Hi. I'm Background Betty.  I'm going to pop up and tell you about the history of computing. The reason we do things
in certain ways is usually because of the path we took.  Here's a fun example - did you ever wonder why your keyboard is so
confused and hard to use, why the keys aren't just A-B-C-D? It's because the earliest mechanical typewriters were very slow, and would jam if
the operator went too fast.  So the designers intentionally designed the keyboard to slow down the operators. Here's more information.


<subtitle>Hello World


<p>All _values_ are made of the same kinds of bits, but they don't all behave the same.  Every _value_ has a _type_ that determines its role.  Some values are numbers, some are letters, and some are instructions.   Values are the building blocks of Javascript programs.

<p>This chapter introduces two simple value types _Number_ and _Boolean_, and some operators you can use with them.


<subtitle>Numbers


<p>The simplest type is _Number_  which are just numbers. In a JavaScript program, they are written like this:

<cm(std)>
13
9.81

<p>We use _Number_s for counting, and sometimes for arithmetic. We can add, subtract, multiply and divide number values and produce a new number value.

<p>But first we're going to show you a neat trick.  You can run a small Javascript program right on this page.  Click on the `console.log( 2 + 2 )` below, and it will turn into a program.  Press CTRL+ENTER to run the program.  Try it now.

<cm(std)>
console.log(2 + 2)

<p>`console.log( )` is a function that prints the value between the two brackets.  Please try each of these little programs.  Try modifying them.  Can you calculate the value of 2 + 2 + 2?


<subtitle>Arithmetic

<p>Arithmetic is exactly what you learned in school, except that we use '*' for multiplication instead of 'x'.  You can add with '+', subtract with `-`, and multiply and divide with `*` and  `/` .  We call these  _operator_s, and we are going to learn about a dozen operators today.

<p>Try out some different calculations yourself.

<cm(std)>
console.log(3 * 4)
console.log(22 / 7)

<p>Consider the following calculation:  100 + 4 * 11  (remember that * means to multiply).  Does the example mean "add 4 and 100, and multiply the result by 11,"  or is the multiplication done before the adding?

<p>If you remember your school lessons, you know the multiplication happens first. But you can change the order with brackets:  Try it.

<cm(std)>
console.log( 100 + 4 * 11 )
console.log( (100 + 4) * 11 )

<p>Without brackets, the calculation order is determined by the _precedence_ of the operators. The example shows that multiplication and division come before addition and subtraction.  Operators with the same precedence that appear next to each other, as in `1 - 2 + 1`, are applied left to right: `(1 - 2) + 1`.

<p>Don't worry too much about this.  When in doubt, just add brackets.  And remember that you need brackets for `console.log()`.



<p>Calculating with fractions is often not exact.  The exact value of 1/3 requires an infinite number of digits, and we usually round it to .33 or .333 or .3333 depending on what accuracy we need.
<cm(std)>
console.log(1/3)

<p>That's how many digits JavaScript keeps.  It is usually enough for anything.

<p>Here's a new arithmetic operator.  The `%` symbol is called _mod_ and gives the _remainder_ of a division.   10 % 3 (we say "ten mod three") gives the answer 1 because 10 divided by 3 gives a remainder of 1.  It's super useful because we can figure out whether one number exactly divides another because then the remainder of _mod_ is zero.
<cm(std)>
console.log(10 % 3)

<p>What numbers will produce _mod_ 0 for 10 (eg: 10 _mod_ 2).  Try it.

<p>OK, 2 and 5. Have you considered 10?  How about 1?  What about 15?

<p>How about 0?  Why did zero give a strange result?  _NaN_ stands for 'Not a Number'.

<p>You can also use _mod_ to split the whole and fraction parts of a number apart.
<cm(std)>
console.log(2.5)
console.log(2.5 % 1)
console.log(2.5 - (2.5 % 1))

<p>The second lines tells us how to get the whole part of a number.

<p>The third line is worth looking at again.   In the inner bracket we create a NEW value that is the whole part of the number (using the trick in the second line), and then we subtract it from the original number `(2.5 - 2)` to get the fractional part.


<subtitle>Bindings

<p>We know how to do simple operations that new values from old values.  Sometimes we want to catch and hold the new values,  JavaScript provides a thing called a _binding_,, which is simply a name that refers to something.

<cm(std)>
let myBinding = 2.5
console.log(myBinding)

<p>The word _let_ is a _keyword_ or 'special word' in Javascript. It is followed by the name of the binding that you want to create  Often we assign a value at the same time by following with an `=` operator and an expression.

<p>Always use lowercase `let` because JavaScript won't recognized `Let` or `LET`.

<p>'let myBinding = 2.5'  creates a binding called `myBinding` and uses it to grab hold of a number value.  We can now use 'myBinding'.  Here's the _mod_ example again.

<cm(std)>
let myBinding = 2.5
let wholePart = myBinding % 1
let fractionPart = myBinding - wholePart
console.log(fractionPart)

<p>As a programmer, you read the first line as "let myBinding get 2.5", and the second line as "let wholePart get myBinding mod 1".  You don't say "equals" because people will think you are a newbie.  Also because the intention of the "=" is to bind 'myBinding' with the value 2.5.   Also because 'equals' in JavaScript refers to something else.

<p>Notice that the second and thrid lines did some calculations to create a NEW value before binding it. Also that it used `myBinding` as if it was a value we typed it.

<p>We only had to type in `2.5` once in this program.  Now if we want to calculate the fractional part of 56.8, we simply change the first line.

<p>This is going to be fun.  We use `console.log()` to type a message.  Here's another function one called `prompt()` that shows a little ((dialog box)) asking you to type something, and passes back it back to your program.

<cm(std)>
let myBinding = prompt("Enter a number")

let wholePart = myBinding % 1
let fractionPart = myBinding - wholePart
console.log(fractionPart)

<p>Now we can find the fraction part of ANY number.

<subtitle>Pointing To a New Value

<p>But the best trick is that 'myBinding' doesn't always have to hold the same value forever  We can disconnect a binding and point it to a new value.   Here's a program that adds two numbers.

<cm(std)>
let myBinding = 5 * 5			// 25
console.log(myBinding)
// 25

myBinding = myBinding + 1
console.log(myBinding)
// 26

myBinding = myBinding + 1
console.log(myBinding)
// 27

<p>We created a binding `myBinding`, and then used it in a second expression (just like above).  But then we assigned the value of the new expression to `myBinding`.  We changed it's value.  And then we did it again.

<p>We only used the keyword _let_ at the top, when we wanted to CREATE this binding.  Then we re-used it. If you tried to bind `myBinding` again, JavaScript would complain.  Try it.

<p>THIS IS IMPORTANT:  Imagine bindings as tentacles, rather than boxes. They do not _contain_ values; they _grasp_ them. Two bindings can refer to the same value. When you need to remember something, you grow a tentacle to hold on to it or you reattach one of your existing tentacles to it.

<p>We had a tentacle pointing to the _value_ 25.  We did NOT change `25` to `26`.  We created a NEW _value_ of `26` somewhere else in the computer, and then switched our tentacle to point to it,  The `25` might still be there, but we have no way to find it without our tentacle.

<br>

<p>Let's look at another example. You have been lending Luigi money. To remember the number of dollars that Luigi still owes you, you create a binding. And then when he pays back $35, you give this binding a new value:

<cm(std)>
let luigisDebt = 140;                  // Luigi owe you $140
luigisDebt = luigisDebt - 35;        // he paid back $35
console.log("Luigi still owes you " + luigisDebt);            // show how much he still owes

<p>We did something neat here.  We put a _String_ into the `console.log()` to make it easier to read.  A _String_ is simply a small text between two quote signs.  You can use 'single-quotes'  or "double-quotes" as long as you use the SAME type of quote to start and end your string.  And you can 'add' strings together.


<subtitle>Converting to a Number

<p>`Prompt()` sends your program a _value_ with _type_ of _String_.  We will look at Strings soon, but the point here is that the type isn't a _Number_.  That can cause strange behavior.  Here's a program that adds a number to itself.

<cm(std)>
let someValue = prompt('Give me a Number')
console.log('Number plus Number is ' + someValue + someValue)
<cm(std)>

<p>Try it.  Hmm, not exactly what we wanted.  And it doesn't do any good to put brackets in, because `someValue` is already a string.  If we add a number and a string, JavaScript assumes we want a string as a result.

<p>Luckily there are functions in JavaScript to help us.  The function `Number()` converts almost anything to a _Number_. So maybe if we try this...  (watch out, `Number()` has a Capital N)

<cm(std)>
let someValue = prompt('Give me a Number')
someValue = Number(someValue)
console.log('Number plus Number is ' + someValue + someValue)

<p>Nope.  Still didn't work, because `someValue` was converted to a string as soon as we tried using it in `console.log()`. Does that make sense?

<p>One way to fix this is to add a new line that creates a binding for the calculation, perhaps called `double`, before we use `console.log()`.  Try it.

<p>Another way to fix this is to put brackets into the `console.log` line, so that JavaScript does the addition of the two numbers first.

<cm(std)>
let someValue = prompt('Give me a Number')
someValue = Number(someValue)
console.log('Number plus Number is ' + (someValue + someValue))

<p>But..?  Putting brackets didn't work when we tried it a minute ago?  That's because `someValue` was already a string.  Are you clear about this?



<subtitle>A Challenge

<p>In Ontario, we charge a sales tax of 13%, which is added at checkout.  Here's a calculator that will ask you for the price of an item, and tell you how much you have to pay at the checkout.

<cm(std)>
let purchase = prompt("How much is your item?")
purchase = Number(purchase)     // convert to a Number

let salesTax = purchase * .13
console.log("You must pay " + (purchase + salesTax))

<p>Try it out.  If you type '1' or '1.00', it works fine.  If you type '1.10', it returns too many digits.  If you try to buy something for '1.11'  BLEECHH !!

<p>The problem is that JavaScript is trying to be accurate, but you only want to know to the penny, not to gizzilion digits.

<p>There are hundreds of useful functions in JavaScript, and one of them will create a _String_ value from your _Number_ with exactly the number of digits you want.  It's called `.toFixed()` and here's an example.

<cm(std)>
let purchase = prompt("How much is your item?")
purchase = Number(purchase)     // convert to a Number

let salesTax = purchase * .13
console.log("You must pay " + (purchase + salesTax).toFixed(2))


<p>That doesn't change the _Number_, just prints it nicely.  But the problem is that your customer won't give you $1.2543000000000002, she will only give you $1.25.  And if you are adding up what all your customers pay so that you can check the cash at the end of the day, you will be out by some tiny amounts.

<p>Change the program below so that we calculate a new value for `purchase` that is exactly what the customer will have to pay.  It's ok if willPay has fewer than two digits (we can fix that with `toFixed()`), but it should not have more.

<cm(std)>
let purchase = prompt("How much is your item?")
let willPay = Number(purchase) * 1.13  // 1.13 same as purchase + (purchase + salesTax)


// your code to chop off the long tail off willPay


console.log("You will pay " + willPay)

<p>Hint: One strategy is to multiply `willPay` by 100 (so that pennies become dollars), chop off any decimal digits, and then divide by 100 (bringing back the pennies).  THe _mod_ function can do the chopping.
