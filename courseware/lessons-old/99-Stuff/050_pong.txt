<title>First Phaser Game

<p>Three functions, called [`preload()`| pre load], [`create()`|create], and [`update()`|update] are part of EVERY Phaser game. We add our own code into these three functions to build our game.  An empty game with the three functions looks like this.

<phaser>
function preload (){
}

function create (){
}

function update (){
}

<p>Let's fire up an image of a red ball.  That requires two steps.  First we have to fetch the ball image, or any other ‘assets’ we need.  Remember that we are running in a browser, and the image lives on a website somewhere, not on our computer. Fetching can take a long time (at least it SEEMS like a long time if you are a computer).

<p>As soon as all resources are available, the game runs [`create()`|create]. So to draw a ball, we need TWO lines, one in the [`preload()`|pre load] and one in the [`create()`|create] functions.

<p>Run this little program.

<phaser>
function preload ()  {
  this.load.image('ball', 'assets/sprites/orb-red.png');
}

function create (){
  this.add.image(400, 100, 'ball');s
}

function update (){
}


<p>Were you able to see the red ball?

<p>The statement [`this.load.image('ball', 'assets/sprites/orb-red.png')`|this dot load dot image of ball comma assets slash sprites / orb red dot P N G,]
fetchs the image of a red ball called [`orb-red.png`|orb red dot P N G,] that lives in the directory [`assets/sprites`|assets slash sprites]. We have given it the name 'ball'.  There's another image on the server called [`tomato.png`|tomate dot P N G,], can you load it?

<p>As soon as [`preload()`|pre load] is finished, Phaser runs the code in [`create()`|create].


<img>images/600.png
<p>The statement [`this.add.image(400, 100, 'ball')`|this dot add dot image of 400 comma 100 comma ball] paints the ball on the screen at location [`(400,100)`|400 comma 100,].  This screen runs from the top left corner [`(0,0)`|zero comma zero] to the bottom right corner [`(800,200)`|800 comma 200], with the first value describing left-right and the second describing up-down.
By convention, we call the first value `x` and the second value `y`.

<p>We have set the screen size to [`800,200)`|800 comma 200,] just for these browser lessons, but there is nothing magical about
this size.  You will be able to use a larger screen for your games.

<p>We only need to fetch an image once, then We can paint that image as many times as we like.

<phaser>
function preload ()  {
  this.load.image('ball', 'assets/sprites/orb-red.png');
}

function create (){
  this.add.image(100, 30, 'ball');
  this.add.image(400, 100, 'ball');
  this.add.image(700, 170, 'ball');
}

function update (){
}

<p>But without bindings, we have no way to reach any of the balls. Let's add a binding, and then ask a ball where it is, using [`console.log()`|console dot log].

<p>And it tells us that it is at
[(400,100)|400 comma 100,], just where we put it.  Try painting the ball at [(30,30)|30 comma 30] or at [(300,30)|300 comma 30] or at [(300,180)|300 comma 180] to get a feel for it.

<phaser>
function preload ()  {
  this.load.image('ball', 'assets/sprites/orb-red.png');
}

function create (){
  let myBall = this.add.image(400, 100, 'ball');
  console.log("myBall is at ",myBall.x,myBall.y)
}

function update (){
}

<p>[`console.log()`|console dot log] is a useful way to look inside a program and see what it is doing.

<p>Here's the last piece.  Phaser will call [`update()`|update] again and again to let us manipulate the ball.

<p>We have added a binding and now we can ask the ball where it is.  But there's a problem. This binding isn't very useful because we can't see it outside the [`create()`|create] function, and we want to move the ball in the [`update()`|update] function.  So let's move the binding to OUTSIDE and try again.

<p>OK, now we can see it. Now if We change the x and y values, then the ball will move.  We do that in the [`update()`|update] function, which the game calls again and again.  Let's move the ball to the right, by increasing the x value every time we go through [`update()`|update].

<phaser>
let myBall  // not yet defined, but visible to both create() and update()

function preload ()  {
  this.load.image('ball', 'assets/sprites/orb-red.png');
}

function create (){
  myBall = this.add.image(400, 100, 'ball');  // use the binding from outside
  console.log(myBall.x, myBall.y)
}

function update (){
  myBall.x = myBall.x + 1
}

<p>Hmmm.  Well it worked.  But we have more to do.  First it’s a bit slow.  That has nothing to do with the speed of your computer.  Phaser tries to update your screen 60 times a second, and there are  800 pixels across.  At 1 pixel, it takes [800/60|800 divided by 60] or over [13.3|13.3] seconds to cross the screen.
<p>If we moved by 10 pixels, then the ball would zip too fast (try it).  3 pixels  will  move us across in [800/(60*3)|800 divided by 60 times 3] or [4.5| 4 point 5] seconds.  That sounds about right.  Try it.
<p>And the ball left the screen when x became bigger than 800. It’s somewhere to your right, heading out across the ocean by now.
<p>Let’s add some code to check for the right edge of our screen. Every time we go through [`update()`|update], we check to see where the ball is.  If it is past 800 pixels then we move it back to the left side by setting x to 0.

<phaser>
let myBall  // not yet defined, but visible to both create() and update()

function preload ()  {
  this.load.image('ball', 'assets/sprites/orb-red.png');
}

function create (){
  myBall = this.add.image(400, 100, 'ball');  // use the binding from outside
 }

function update (){
  if(myBall.x > 800){
    myBall.x = 0
  }
  myBall.x = myBall.x + 3
}


<p>We are going to make the ball 'bounce'.  To do that, we are going to create two bindings called [`dx`| D X] and [`dy`| D Y] that track the number of pixels we want to move in the x and y directions.  We will start by setting them both to 3 (meaning to move 3 pixels every time `update()` is called).

<p>When we reach an edge, we change the value of [`dx`| D X] or [`dy`| D Y] by multiplying it by -1.  So if it is 3 then it becomes -3, and if it is -3 then it becomes 3.  Adding a negative number reduces our position in the x and y directions, moving us backwards.
<p>[`dx`| D X] or [`dy`| D Y] are just made up names, but you will often see them.  They are adopted from calculus, and represent the ‘delta’ or difference in x and y.  We could have called our bindings `up` and `left`, perfectly acceptable.  But maybe that would have been confusing when the ball was traveling down or right.

<phaser>
let myBall
let dx=3, dy=3

function preload ()  {
  this.load.image('ball', 'assets/sprites/orb-red.png');
}

function create (){
  myBall = this.add.image(400, 100, 'ball');
}

function update (){
  if(myBall.x<0 || myBall.x>800){
    dx = dx * -1
  }
  if(myBall.y<0 || myBall.y>200){
    dy = dy * -1
  }
  myBall.x = myBall.x + dx
  myBall.y = myBall.y + dy
}

<p>Work through this code until you understand it.  Maybe try changing it.  Maybe add a [`console.log()`|| console dot log] to follow the values. sHow about making the left and up speed
twice as fast as the right and down speeds?  How about adding a second ball?

<p>For a big challenge, try to detect when two balls hit each other and make them bounce from the collision.

<subtitle>Adding Sound

<subtitle>Using the Keyboard

<p>Let's use the keyboard.

<phaser>
let myBall,upKey,downKey,leftKey,rightKey
let dx=3,dy=3

function preload ()  {
  this.load.image('ball', 'assets/sprites/orb-red.png');
  upKey = game.input.keyboard.addKey(Phaser.Keyboard.UP);
  downKey = game.input.keyboard.addKey(Phaser.Keyboard.DOWN);
  leftKey = game.input.keyboard.addKey(Phaser.Keyboard.LEFT);
  rightKey = game.input.keyboard.addKey(Phaser.Keyboard.RIGHT);
}

function create (){
  myBall = this.add.image(400, 100, 'ball');

}

function update (){
if (upKey.isDown)
   {
       myBall.y += dy
   }
   else if (downKey.isDown)
   {
       myBall.y +=dy
   }

   if (leftKey.isDown)
   {
       myBall.x += dx
   }
   else if (rightKey.isDown)
   {
       myBall.x += dx;
   }


}



<phaser(proctor)>
// your program here
