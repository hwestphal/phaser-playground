<title>Boolean values

<p>JavaScript has a _Boolean_ type, which has just two values: _true_ and _false_. We write the keywords  _true_ and _false_ (without quotes).  It is named after the nineteenth-century mathematician George Boole, In Boolean logic, there are only two possible values.

<cm>
console.log(true)
console.log(false)


<p>Booleans are super useful because your programs can make decisions based on whether something is true or false.  We call an expression that evaluates to `true` or `false` to be a _condition_


<subtitle>Comparison

A useful condition is whether one number is bigger than another. The `>` and `<` operators are the traditional symbols for "is greater than" and "is less than".  Asking whether a value "is greater than" another value will produce one of the two _Booleans_:  _true_ or _false_.

<cm>
let mysteryValue = 3        // ok, not much of a mystery
console.log(mysteryValue > 2)    // three is GREATER THAN two
// true
console.log(mysteryValue < 2)	// three is LESS THAN two
// false

<p>We  use the _==_ operator to decide whether two values are equal.

<p>'Equals' uses TWO equal signs.  Remember that the 'get' operator was ONE equal signs.  Can you see the difference between the 'gets' and 'equals' below?  You read that first line as "Let weCanCount gets two plus two equals 5".

<cm>
let weCanCount = ( 2 + 2 == 5 )
console.log( "It is " + weCanCount + " that we can count." )
// run this, and then fix it
<cm>

<p>Other comparison operators are `>=` (greater than or equal to), `<=` (less than or equal to), `==` (equal to), and `!=` (not equal to).

<cm>
console.log(10 == 5 + 5)		// equal to ?
// true
console.log(10 <= 5 + 5)		// less than or equal to ?
// true
console.log(10 >= 5 + 5)		// greater than or equal to ?
// true


<p>Just to be clear, these operators PRODUCE a new _value_ with _Boolean_ _type_ from values of other types. We use comparisons to build _conditional_ expressions.


<subtitle>Logical operators

<p>There are three operations that operate directly on _Boolean_ values, - _&&_, _||_, and _!_ which we say as 'and', 'or', and 'not'.  They can be used to "reason" about Booleans.  It's really easy, you build up complicated expressions exactly as you do in English.

<p>We write _AND_ as  `&&` .  It returns  _true_ only if both the values given to it are _true_.  "I like baseball __and__ ice cream".

<cm>
console.log(true && false)
// false
console.log(true && true)
// true

We write _OR_ as  `||` (find the symbol on your keyboard with a little gap that like looks like  ‚ïè).  It returns  _true_  if either the values given to it are _true_.  "I like baseball __or__ doing my taxes".

<cm>
console.log(true || true)
// true
console.log(false || true)
// true
console.log(false || false)
// false

<p>The 'not' operator is written with an exclamation mark (`!`). It simply flips the value given to it. `!true` produces `false` and `!false` gives `true`.  "I do __not__ like doing my taxes".

<cm>
console.log( ! false )
// true
console.log( ! true )
// false


<p>JavaScript has rules of precedence for these operators, just like the 'multiplication before addition' rule.   Usually JavaScript can guess what you want, but you should add brackets when there is any doubt.
<cm>
1 + 1 == 2 && 10 * 10 > 50

<p>Ok, here's a fun trick that you will learn if you study math in university, 'De Morgan's Law' says that a statement 'A and B' can be transformed into an equivalent statement 'not (not A or not B)'.  It is useful in Engineering because it lets you change 'AND' statements ito 'OR' statements, or vice versa.

<p>It sounds crazy hard, but don't be scared.  It's easy to demonstrate in JavaScript.

<cm>
let A = true
let B = false

console.log( (A && B) == !(!A || !B) )
// 'A and B' equals 'not (not A or not B)'

It also works the other way around.

<cm>
let A = true
let B = false

console.log( (A !! B) == !(!A and !B) )
// 'A or B' equals 'not (not A and not B)'



<p>Let's give an example.  A student usually goes to Elementary school until grade 5,then middle dchool until grade 8, then high school.  If we know the grade that the student is in, can we determine whether he goes to middle school?

<p>So maybe we are thinking "He goes to middle school ... if he is NOT in elementary school and he is NOT in high school. That sounds sensible, let's write that as a program.

<cm>
let grade = Number(prompt("What grade is he in?"))
let elementarySchool = grade < 6
let highSchool = grade > 8

let middleSchool = !elementarySchool && !highSchool
console.log("Middle school is " + middleSchool)


<p>Remember prompt() and Number().  We simply combined them into a single expression in the first line.

<p>For the second line, say "Let elementarySchool get grade less-than 6".

<p>We test it with a few different values, and it works just fine.  (Try it.)

<p>So the principal tells the vice principal to stand at the front door and INTERCEPT all the kids who shouldn't be here.  She should look for - are you ready? - "students who are not both NOT in elementary school and NOT in high school)". That sort of sounds like a school rule, doesn't it?  (the 'both' is how we add brackets in spoken English).

<cm>
let grade = Number(prompt("What grade is he in?"))
let elementarySchool = grade < 6
let highSchool = grade > 8

let intercept = !(!elementarySchool && !highSchool)
console.log("Intercept this student is " + intercept)

<p>The rule is right (try it).

<p>But the vice principal's eyes are desperately rolling in both directions.  Luckily you are there to help her, and you know De Morgan's Law.  You tell her to intercept "Students who are in elementary school OR in high school".

<p>That doesn't even need brackets.  We're going to put both versions in the program, they should always both be _true_ or both be _false_.  Try them.

<cm>
let grade = Number(prompt("What grade is he in?"))
let elementarySchool = grade < 6
let highSchool = grade > 8

let intercept = !(!elementarySchool && !highSchool)
console.log("Intercept this student is " + intercept)

let intercept = elementarySchool || highSchool
console.log("Intercept this student is " + intercept)



<subtitle> Binding names

<p>We used strange-looking names of bindings like `elementarySchool`. Here are the rules.  Binding names can include upper and lower letters, digits, and the dollar sign ("$") and underscore ("&#95;").  But the name must not start with a digit or include other punctuation or special characters.  Watch out that two names with slightly different case are NOT the same.

<cm>
let LongNamesArePerfectlyAcceptable = "Something Important"
console.log(LongNamesarePerfectlyAcceptable)
// lost something important?


<p>You can write programs that look like this one and they are perfectly correct.  But your fellow programmers will think you are an idiot.

<cm>
let ____ = "I"
let _____ = ____ + "D" + ____
let ______ = _____ + "OT"
console.log( ____ + " am an " + ______);


<p>`console.log()` is always lower-case, but `Number()` has a capital N.  That's just the way it is.



<subtitle> Challenge

<p>In ice hockey, a play is offside if a player on the attacking team enters the offensive zone before the puck, and anyone on that player's team touches the puck before it leaves the zone.

<p>Our glorious JavaScript team is playing against the chess club.  Jaden crossed the line before the puck, and then Jada touched it.  Was it 'offside' based on the following information?

<p>To help testing, I've set up four bindings (all _true_).  In this combination, it is NOT offside because the puck left the zone before Jada touched it.  There are 16 possible combinations and your code has to work for every one.

<cm>
let weAreAttacking = true
let JadenOnOurTeam = true
let JadaOnOurTeam = true
let puckLeftZone = true    // puck left zone before Jada touched it?

// decode whether the play was offside.  put your code here.
// add as many lines as you need

let offside = true // or false
console.log ("offside " + offside)

<p>You will want to use more than one line of code, and put in your own `console.log()` statements so you can check your logic.
