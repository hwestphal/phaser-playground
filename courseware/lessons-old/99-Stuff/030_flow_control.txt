<title>Flow Control


<p>Not all programs are straight roads. Now that we know about creating _Boolean_ values, we can use them to steer our programs.




<subtitle>if (condition) {statements}

<img>images/if.jpg
<p>The `if` statement evaluates the condition in brackets, and then executes a block of statement "wrapped" in  _curly braces_ (`{` and `}`) if that condition is true.

<p>Oops.  Need a quick detour here to talk about the _curly braces_ (`{` and `}`).

<p>A _statement_ can be a single statement, or a _block_ of many statements  "wrapped" in _curly braces_.  This is a really important idea.   Whatever is in the curly brackets is just a SINGLE statement, even if it is a thousand pages of code.

<p>If you leave out the _curly braces_, you can still put in ONE line of code.  But that's a really easy way to
make mistakes, and better programmers always use curly braces. For now, you should always use curly braces too.

<p>Back to `if`.  Run this program, then change it to `2 + 2 = 5` and see what happens.

<cm>
if(2 + 2 == 4){     // check whether this is true
	  console.log("Right. ");
	  console.log("This computer can count.")
}
console.log("This is the statement AFTER the 'if'.")


<p>Another quick detour.  JavaScript doesn't care how you format a program. You can put the entire program on one long line,

<p>In this example, I have indented the two console.log statements to show they are "wrapped" in the  _curly braces_. But JavaScript doesn't look at indenting, that's just for you.

<p>Remove the curly braces, and run the program again. Try it now.  Here it is again without curly braces.  But it is working differently.  Change it to `2 + 2 = 5` and see what happens.  If you aren't sure, then go back and read this section again.

<p>(Also: notice the tiny yellow WARNING on the right side of the codebox.  It will go away when you fix the curly braces.)

<cm>
if(2 + 2 == 4)     // check whether this is true
	  console.log("Right. ");
	  console.log("This computer can count.")

console.log("This is the statement AFTER the 'if'.")


<p>Do you see how this kind of error is easy to make.  That's why you should always use curly braces.

<p>Did you notice the yellow WARNING icon?  It tells you that your code likely has a problem that you should
fix.  There is another one, a red DANGER icon, that says you definitely have a problem and need to fix your
code before you try to run it.  Try adding or removing a single curly brace somewhere and see.

<p>By now you have probably figured out what `if()` does.

<subtitle>`if (condition) {statement} else {statement}`

<img>images/if-else.jpg
<p>When you have code that executes when your condition is true, then you often have different code for then the condition is false. This 'false' path is represented by the second arrow in the diagram.

<p>Let's write a program to help us practice our math. Try this program with both a right and a wrong answer.

<cm>
let answer = Number(prompt("What is 5 + 5 ?"))
if(answer == 10){
     console.log("Right.");
} else {
     console.log("Wrong.");
}

<p>The `if (condition) {statement} else {statement}` is just a statement.  So we can chain them together.  Let's make our program a little bit smarter and give the user a second try.

<cm>
let answer = Number(prompt("What is 5 + 5 ?"))
if(answer == 10){
     console.log("Right.");
} else {
     answer = Number(prompt("Wrong.  Please try again.  What is 5 + 5 ?"))
     if(answer == 10){
          console.log("Right.");
     } else {
          console.log("You hare HOPELESS.")
     }
}

<p>Again, the indenting makes the program more readable, but JavaScript doesn't care.  The entire program could be on one line and it would run the same way.


<subtitle>`while (condition) {statements}`

<p>Here's a program that outputs the first 10 numbers from 0 to 9.  (Programmers like to count from zero.)  Try it.

<cm>
console.log(0);
console.log(1);
console.log(2);
console.log(3);
console.log(4);
console.log(5);
console.log(6);
console.log(8);
console.log(9);

<p>That works, but it's pretty stupid.  And because we mistyped, we forgot the '7'.

<p>We can do the same thing with a `while` loop.  Try it.  Try playing with it.

<cm>
let count = 0
while (count <= 10){
  console.log(count)
  count = count + 1
}

<img>images/while.jpg
<p>The `while` statement evaluates the condition in brackets, and then executes a block of statement "wrapped" in  _curly braces_ (`{` and `}`) while that condition is _true_.

<p>That is exactly the same sentence we used to describe `if`, except we replaced 'if' with `while`.

<p>So repeating what we said for `if`, we use the _curly braces_ to "wrap" the code in the loop.  If we leave them out then we can still run ONE statement, but good programmers ALWAYS put them in.

<p>The `while` checks the `condition` at the top each time around.  If the condition is false going in the first time, the statements will not be executed.  There must be something in the loop that changes the condition, or the loop will execute forever.  `while` keeps checking until the program's work is finished.

<p>Did you notice the statement `count = count + 1`.  That's the key to controlling the loop.  Remember that we say "count gets count plus one", because it is updating a binding with one more than its previous value.  The `equal` operator in JavaScript is `==`.



<p>Let's write a program that finds the factors of a number (numbers that can divide that number without a remainder).  For 12, the factors are 1, 2, 3, 4, 6, and 12.

<p>We ask for the number using a `prompt()`.  We then set `possible` to 1, and try it.  Remember that _mod_ function that gave us a remainder?  We can use it here, if the remainder is zero, then the numbers divide exactly.  We stick an `if` condition inside our `while` loop, and we are done.  Try it.  What are the factors of 1749?

<cm>
let factorize = Number(prompt("What number do you want to factor?"))

let possible = 1
while (possible <= factorize) {
  if((factorize % possible) === 0){
      console.log(possible)    // it is a factor
     }
  possible = possible + 1
}
console.log("done")


<p>Did you notice that we put an `if` inside our `while` loop?

<p>We repeat again.  USE THE CURLY BRACES.  If you had forgotten them on this program, the `while` would have only have loooped over one statement - the `if`.  And since `possible` would not get changed in the loop, the program would have run forever without doing anything.  Well, not forever.  Usually until you shut the browser or reboot your computer.

<p>Try it.  Take out the _curly braces_ that wrap the `while`.  BOOM.

<p>Welcome back.  We rescued you.  But we can't do that if you use a `prompt()`, and that's what we are going to do next.

<p>Let's add a loop to our math quiz.  Try it.  Play with it.

<cm>
let count = 5
let feedback = ""
while (count < 8){
    let answer = prompt(feedback + "What is 5 + " + count)
    if(Number(answer) == 5 + count){
      	feedback = "Right. ";
    } else {
        feedback = "Wrong. ";
    }
    count = count + 1
}

<p>Did you see how we added `feedback` and changed it depending on the answer?

<p>We don't have to use a counter for the while loop.  Here's a version that asks questions until you don't answer one (just hit ENTER which returns an empty string `""`).  The trick is that we are looping on `answer` instead of on `count`.  But that means we have to create the binding `answer` BEFORE the loop, and "initialize" it with something that ISN'T an empty string.  Try it.

<cm>
let count = 5
let feedback = ""
let answer = "magic value"

while (answer != ""){
    answer = prompt(feedback + "What is 5 + " + count)
    if(Number(answer) == 5 + count){
      	feedback = "Right. ";
    } else {
        feedback = "Wrong. ";
    }
    count = count + 1
}

<p>But we are still using `count` to generate the questions.  Here's a function that generates a random number between 1 and 10: `Math.floor(Math.random() * 9) + 1`.  We won't explain it here, because random numbers are really useful for games, and we will have a whole lesson on them.  But the `9` means generate numbers between 0 and 9, and the `+ 1` shifts them to between 1 and 10, and you can try changing them.

<p>Here's the program with random numbers.  Try it.  Play with it.

<cm>
let feedback = ""
let answer = "magic value"

while (answer != ""){
    let value1 = Math.floor(Math.random() * 9) + 1
    let value2 = Math.floor(Math.random() * 9) + 1
    answer = prompt(feedback + "What is " + value1 + " times " + value2)

    if(Number(answer) == value1 * value2){
      	feedback = "Right. ";
    } else {
        feedback = "Wrong. ";
    }
}

<p>Neat.  A couple of minutes practice with that and you are going to be GREAT at multiplication.

<p>But it's not pretty.  I hate "magic value", it makes the code hard to understand.  It means that you have to initialize stuff outside the loop just to fool the program into running.

<p>And there is a really dangerous booby-trap in the program.  The binding `answer` was created outside the loop, and that's the one the loop tests.  If by mistake you said `let answer = prompt(...` inside the loop, then you would have created a DIFFERENT binding `answer` inside the loop from th one outside.

<p>And since you are testing the OUTSIDE binding in the `while()`, you would have created an infinite loop.  Try it in this mini-program that we can rescue you from.  Try it, add a 'let' to the inside `answer`, and try it again.


<cm>
let answer = 0
while (answer == 0){
  let answer = 1    // should get us out of the loop, except...
}

<p>Here's another way.

<subtitle>Breaking Out of a Loop

<p>Here's an infinite loop.

<cm>
while(true){
    \\ whatever
}

<img>images/break.jpg
<p>If you run it here, we will rescue you after 20 seconds.  If you run it in the wild, you will have to shut your browser or reboot.

<p>But we can break out of that loop with a special statement called `break`.  It has the effect of immediately jumping out of the enclosing loop.

<cm>
while (true){
    let value1 = Math.floor(Math.random() * 9) + 1
    let value2 = Math.floor(Math.random() * 9) + 1
    let feedback = ""
    let answer = prompt(feedback + "What is " + value1 + " times " + value2)

    if(answer == "") {break}   // exit while loop

    if(Number(answer) == value1 * value2){
      	feedback = "Right. ";
    } else {
        feedback = "Wrong. ";
    }
}


<p>This program illustrates the `break` statement. It finds the first number that is both greater than or equal to 20 and divisible by 7.

<cm>
for (let current = 20; ; current = current + 1) {
  if (current % 7 == 0) {
    console.log(current);
    break;
  }
}
//  21



<p>Using the remainder (`%`) operator is an easy way to test whether a number is divisible by another number. If it is, the remainder of their division is zero.

<p>The `for` construct in the example does not have a part that checks for the end of the loop. This means that the loop will never stop unless the `break` statement inside is executed. If you were to remove that `break` statement or you accidentally write an end condition that always produces `true`, your program would get stuck in an _((infinite loop))_. A program stuck in an infinite loop will never finish running, which is usually a bad thing.

<p>If you create an infinite loop in one of the examples on these pages,
you'll usually be asked whether you want to stop the script after a
few seconds. If that fails, you will have to close the tab that you're
working in, or on some browsers close your whole browser, in order to
recover.


<subtitle>continue

<img>images/while.jpg
<p>The `continue` keyword is similar to `break`, in that it influences
the progress of a loop. When `continue` is encountered in a loop body,
control jumps out of the body and continues with the loop's next
iteration.



<subtitle>Summary

<p>You now know that a program is built out of statements, which
themselves sometimes contain more statements. Statements tend to
contain expressions, which themselves can be built out of smaller
expressions.

<p>Putting statements after one another gives you a program that is
executed from top to bottom. You can introduce disturbances in the
flow of control by using conditional (`if`, `else`, and `switch`) and
looping (`while`, `do`, and `for`) statements.

<p>Bindings can be used to file pieces of data under a name, and they are
useful for tracking state in your program. The environment is the set
of bindings that are defined. JavaScript systems always put a number
of useful standard bindings into your environment.


<subtitle>Exercises

<p>Each exercise starts with a problem description. Read that and try to
solve the exercise.
<p>You can ask for help at any time.  But if you want to learn something from the exercises,
then attack the problem long and hard enough, until you have a slight
headache.  We have covered a lot of ground, and this isn't easy stuff.

<subtitle>Looping a triangle

<p>Write a loop that makes seven calls to `console.log` to output the
following triangle:

<pre>
#
##
###
####
#####
######
#######

It may be useful to know that you can find the length of a string by
writing `.length` after it:

<pre>
let abc = "abc";
console.log(abc.length);
//  3

Most exercises contain a piece of code that you can modify to solve
the exercise. Remember that you can click code blocks to edit them.

<cm>
// write the triangle exercise here
//


{{hint

{{index "triangle (exercise)"}}

You can start with a program that prints out the numbers 1 to 7, which
you can derive by making a few modifications to the [even number
printing example](program_structure#loops) given earlier in the
chapter, where the `for` loop was introduced.

Now consider the equivalence between numbers and strings of hash
characters. You can go from 1 to 2 by adding 1 (`+= 1`). You can go
from `"#"` to `"##"` by adding a character (`+= "#"`). Thus, your
solution can closely follow the number-printing program.

hint}}

#<subtitle>FizzBuzz

{{index "FizzBuzz (exercise)", loop, "conditional execution"}}

Write a program that uses `console.log` to print all the numbers from
1 to 100, with two exceptions. For numbers divisible by 3, print
`"Fizz"` instead of the number, and for numbers divisible by 5 (and
not 3), print `"Buzz"` instead.

When you have that working, modify your program to print `"FizzBuzz"`,
for numbers that are divisible by both 3 and 5 (and still print
`"Fizz"` or `"Buzz"` for numbers divisible by only one of those).

(This is actually an ((interview question)) that has been claimed to
weed out a significant percentage of programmer candidates. So if you
solved it, your labor market value just went up.)

{{if interactive
<cm>
// Your code here.
<cm>
if}}

{{hint

{{index "FizzBuzz (exercise)", "remainder operator", "% operator"}}

Going over the numbers is clearly a looping job, and selecting what to
print is a matter of conditional execution. Remember the trick of
using the remainder (`%`) operator for checking whether a number is
divisible by another number (has a remainder of zero).

In the first version, there are three possible outcomes for every
number, so you'll have to create an `if`/`else if`/`else` chain.

{{index "|| operator", ["if keyword", chaining]}}

The second version of the program has a straightforward solution and a
clever one. The simple way is to add another conditional "branch" to
precisely test the given condition. For the clever method, build up a
string containing the word or words to output and print either this
word or the number if there is no word, potentially by making good use
of the `||` operator.

hint}}

#<subtitle>Chess board

{{index "chess board (exercise)", loop, [nesting, "of loops"], "newline character"}}

Write a program that creates a string that represents an 8×8 grid,
using newline characters to separate lines. At each position of the
grid there is either a space or a "#" character. The characters should
form a chess board.

Passing this string to `console.log` should show something like this:

<cm>{lang: null}
 # # # #
# # # #
 # # # #
# # # #
 # # # #
# # # #
 # # # #
# # # #
<cm>

When you have a program that generates this pattern, define a
((binding)) `size = 8` and change the program so that it works for
any `size`, outputting a grid of the given width and height.

{{if interactive
<cm>
// Your code here.
<cm>
if}}

{{hint

{{index "chess board (exercise)"}}

The string can be built by starting with an empty one (`""`) and
repeatedly adding characters. A newline character is written `"\n"`.

{{index [nesting, "of loops"]}}

To work with two ((dimensions)), you will need a ((loop)) inside of a
loop. Put ((curly braces)) around the bodies of both loops to make it
easy to see where they start and end. Try to properly indent these
bodies. The order of the loops must follow the order in which we build
up the string (line by line, left to right, top to bottom). So the
outer loop handles the lines and the inner loop handles the characters
on a line.


You'll need two bindings to track your progress. To know whether to
put a space or a hash sign at a given position, you could test whether
the sum of the two counters is even (`% 2`).

Terminating a line by adding a newline character must happen after the
line has been built up, so do this after the inner loop but inside of
the outer loop.

hint}}


<cm(proctor)>
// your program here



<subtitle>The environment

<p>Let's review.  _Values_ are chunks of bits that each have a  _types_.  The simple types are _Number_, _String_, and _Boolean_.  A _binding_ is a named tentacle that may point to a _value_.    Are you solid on this?

<p>When a program starts up, there are always existing bindings that are part of JavaScript.  Other bindings help interact with the surrounding system. For example, in a ((browser)), there are functions to interact with the currently loaded website and to read ((mouse)) and ((keyboard)) input.

<p>There are hundreds of functions that you have access to, and we're going to start using them without really understanding them for now.

<p>We've already seen one such function, called `console.log()`.   Here's another one called `prompt()` that shows a little ((dialog box)) asking the user to type something, and passes back that string to your program.

<cm>
let secret = prompt("Enter passcode")
console.log(secret)


<p>Functions seem to be special names followed by brackets (called 'parentheses').  But it's the other way around, the brackets are the important part and the name is just a binding tentacle like any other.

<p>Values in the brackets (called _((argument))s_.) are passed to the function, which does something with them and optionally returns a result.   `prompt()`  has two arguments, the second one is an optional string.  Try adding the second parameter above, and see what it does.
