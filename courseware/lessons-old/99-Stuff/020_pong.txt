<title>Pong

<img>images/pong.jpg
<p>Pong was the first successful video game, and launched the video game industry. [<a href=”https://www.youtube.com/watch?v=it0sf4CMDeM”>Here</a>|Here] is what the game looked like.  In this lesson, you are going to write a simpler, single-player Pong game.  
<p>But first we need to learn a bit more JavaScript.



<subtitle>Our First Game

<p>To write a video game, we create a ‘scene’ and point a ‘camera’ at it. Then we ‘update’ the elements of the scene and perhaps move the camera. It is that simple.

<p>We have not talked about 	`functions` yet. Don’t worry.   Use [`create()`|create] to prepare assets and build your ‘scene’. Then use [`update()`|update] to move things around.  Here’s an empty game with the two functions [`create()`|create] and [`update()`|update]. 
<three>
function create(){
}
function update(){
}

<p>Now we are going to add a red ‘ball’ to the scene in [`create()`|create].  If you run it, you should get the image of a red circle, which we are going to use as our ball.

<three>
function create(){
    scene.add ( circle() )
}

function update(){
}

<p>Were you able to see the red ball?  It is at the center of the screen at a location we call (0,0).  Adding a marker for the center of the screen might make it clearer.

<three>
function create(){
   scene.add ( circle() )
   scene.add ( origin() )
}

function update(){
}

<img>images/xy.jpg
<p>Every location in the scene has an address like [(15,-10)|fifteen comma minus 10]. Locations are all relative to a starting point at [(0,0)| zero comma zero] in the middle of the scene, called the ‘Origin’. The first number in an address tells us how far to move left or right of the zero point (negative numbers move left), and the second number tells us how far to move up or down (negative numbers move down). 

<p>We use the letter ‘x’ for the left-right direction, and ‘y’ for the up-down direction. 
<p>When we add an image to the scene, it is centered at the [(0,0)| zero comma zero] Origin point. If we want to move it, then we need a binding to grab it.  Let’s position that ball to (2,3) with a binding called `ball`.  

<three>
function create(){
   let ball = scene.add ( circle() )
   ball.position.x = 2
   ball.position.y = 3

   scene.add ( origin() )

}

function update(){
}

<p>Hey! That’s not exactly what we want. The white lines moved with the ball. That’s because we attached our binding to the scene, and it moved the whole universe. It’s a useful trick, but not what we want.  Let’s try again, attaching our binding to the red ball. 
 
<three>
function create(){
   let ball
   scene.add ( ball = circle() )
   ball.position.x = 2
   ball.position.y = 3

   scene.add ( origin() )
}

function update(){
}

<img>images/x2y3.jpg
<p>And now our ball is at (2,3).  Try moving it to other parts of the screen.

<p>The scene stretches out infinitely in all directions.  The amount we can see on our screen depends on where we put our camera, but that’s not for today.  So we are going to simply accept that the screen stretches from (-13.37,-7.67) to (13.37,7.67).  Put these two values in your program if you like.

<pre>
let xMax = 13.37
let yMax = 7.67

<br>

<p>What if we want to put a second image into the scene? We have to create a new object to add to our scene.  If we tried to add our first ball a second time, it would be the same ball.  Even if we added a new binding, it would be the same ball. Try it if you like.  

<p>We need to create a second ball by calling `circle()` again.

<three>
function create(){
   let ball1, ball2
   scene.add ( ball1 = circle() )
   ball1.position.x = 2
   ball1.position.y = 3

	
   scene.add ( ball2 = circle() )
   ball2.position.x = -5
   ball2.position.y = 2

   scene.add ( origin() )
}

function update(){
}

<p>What if we want a different colour?  Colours are defined as hex-digit numbers, like #FF69B4 (Hot Pink).  In JavaScript we write them with a leading [‘0x’|zero x] so Hot Pink is `0xFF69B4`, without quotes. The crayon colour Alien Armpit, a yellowish green, is #C5E17A.
<three>
function create(){
   let ball
   scene.add ( ball = circle(0xFF69B4) )
   ball.position.x = 2
   ball.position.y = 3

   scene.add ( origin() )
}

function update(){
}
<img>images/8colors.png
<p>Here’s a website that helps you find [<a href="http://html-color-codes.info" title="HTML color codes">HTML color codes</a>|color codes]. You can spend hours finding the exact right colours for your game, but let’s keep it simple for now.  We have set up the 8 basic colours on the right.  They should be enough for the first few games.  The is no magic, we simply typed in this code:
<pre>
      let BLACK  = 0x000000
      let WHITE  = 0xFFFFFF
      let RED    = 0xFF0000
      let GREEN   = 0x00FF00
      let BLUE   = 0x0000FF
      let YELLOW = 0xFFFF00
      let CYAN   = 0x00FFFF
      let MAGENTA = 0xFF00FF
<p>So now we know how to change colours. Here’s an example.
<three>
function create(){
    let ball1, ball2, ball3
   scene.add ( ball1 = circle(CYAN) )
   ball1.position.x = 2
   ball1.position.y = 3

   scene.add ( ball2 = circle(YELLOW) )
   ball2.position.x = 5
   ball2.position.y = -3

   scene.add ( ball3 = circle(RED) )
   ball3.position.x = -8
   ball3.position.y = -1

    scene.add ( origin() )
}
function update(){
}
<p>You can position them in different places, and change their colours.  Give it a try. Now we are going to MOVE the balls around, using the `update()` function.  The ball will appear to move because we call [`update()`|update] again and again, about 60 times a second, adding a small amount to `position.x` each time.  
<p>Let’s drop back to a very simple scene with just one ball, and see how it moves.
<three>
function create(){
   let ball
   scene.add ( ball = circle(RED) )
    scene.add ( origin() )
}
function update(){
	ball.position.x = ball.position.x + 0.01	
}
<p>Oops.  All we got was a message that `ball` was undefined.   Remember we talked about scope a bit earlier, and stated that a binding in a code block was not visible outside it.  The binding for `ball` is inside the `create()` code block and not visible to the `update()` code block.
<p>That’s easy to fix, we simply move the binding outside the `create()` code block so that it is visible to both.  Let’s try again.
<three>
let ball
function create(){
   scene.add ( ball = circle(RED) )
    scene.add ( origin() )
}
function update(){
	ball.position.x = ball.position.x + 0.1
}

<p>

<p>Well it worked.  But we have more to do.  First it’s a bit slow.  That has nothing to do with the speed of your computer.  We are refreshing [`update()`|update] exactly 30 times a second, even though your computer surely can run much faster.  This measured timing means that a game designed on a fast computer will run the same on a slower one, and vice versa.
<p>The right edge (xMax) is about 23 units out..  If we move 0.1 to the right then every second we move 30 times 0.1, or 3.  So it takes just under eight seconds to reach the edge of the screen.
<pre>
let xMax = 23.0
let yMax = 7.5
<br>
<p>Second, the ball left the screen when x became bigger than xMax (about 23.1). It’s somewhere to your right, heading out across the ocean by now.

<p>Let’s add some code to check for the right edge of our screen. Every time we go through [`update()`|update], we check to see where the ball is.  If it is xMax then we move it back to the left side by setting x to -xMax.

<three>
let xMax = 23.0
let yMax = 7.5
let ball
function create (){
	 scene.add ( ball = circle(RED) )
	 scene.add ( origin() )
 }

function update (){
  if(ball.position.x > xMax){
    ball.position.x = -xMax
  }
  ball.position.x = ball.position.x + 0.5
}


<p>We are going to make the ball 'bounce'.  To do that, we are going to create two bindings called [`dx`| D X] and [`dy`| D Y] that track the number of pixels we want to move in the x and y directions.  We will start by setting them both to .5 (meaning to move .5 scene units every time `update()` is called).

<p>When we reach an edge, we change the value of [`dx`| D X] or [`dy`| D Y] by multiplying it by -1.  So if it is .5 then it becomes -.5, and if it is -.5 then it becomes .5.  Adding a negative number reduces our position in the x and y directions, moving us backwards.

<p>[`dx`| D X] or [`dy`| D Y] are just made up names, but you will often see them. They are adopted from calculus, and represent the ‘delta’ or difference in x and y. We could have called our bindings `up` and `left`, perfectly acceptable.  But maybe that would have been confusing when the ball was traveling down and right.

<three>
let xMax = 23.0
let yMax = 7.5
let dx=.5, dy=.5
let ball
function create (){
	 scene.add ( ball = circle(RED) )
	 scene.add ( origin() )
 }


function update (){
  if(ball.position.x<-xMax || ball.position.x>xMax){  // || is the OR operator
    dx = dx * -1
  }
  if(ball.position.y<-yMax || ball.position.y>yMax){
    dy = dy * -1
  }
  ball.position.x = ball.position.x + dx
  ball.position.y = ball.position.y + dy
}

<p>Remeber that the || is simply an _OR_,  So the first _IF_ in the `update` function says “If the ball position is less than zero OR the ball position is greater than xMax, reverse the x direction.”  The second _IF_ does the same in the y direction. 
<p>Work through this code until you understand it.  Try changing it.  Maybe add a [`console.log()`|| console dot log] to follow the values. sHow about making the left and up speed twice as fast as the right and down speeds? How about adding a second ball?

<p>For a big challenge, try to detect when two balls hit each other and make them bounce from the collision.

<br>
<img>images/center.png
<p>Go back and slow down the game (dx and dy to .1), and watch the bounce.  It isn’t quite right.  The problem is that we are moving a single point around the screen, but the ball is bigger than just a point.  Let’s move the origin with the ball to see that.
<three>
let xMax = 23.0
let yMax = 7.5
let dx=.1, dy=.1
let ball,bOrigin
function create (){
	 scene.add ( ball = circle(RED) )
	 scene.add ( bOrigin = origin() )
 }

function update (){
  if(ball.position.x<-xMax || ball.position.x>xMax){  // || is the OR operator
    dx = dx * -1
  }
  if(ball.position.y<-yMax || ball.position.y>yMax){
    dy = dy * -1
  }
  ball.position.x = ball.position.x + dx
  ball.position.y = ball.position.y + dy
  bOrigin.position.x = ball.position.x
  bOrigin.position.y = ball.position.y
}

<img>images/radius.jpg
<p>But before we can fix the bounce, we need to know how big the ball is.  And it turns out that you can control the size of the ball.  
<p>We saw that when we add a circle to the scene, we can specify colour by adding an optional ‘parameter’.  There is a second optional parameter tells us how big to make it.  If you don’t specify the size, you get a circle with radius of 1.  In this code, we draw four balls, the red one has the ‘default’ radius of 1 and then larger balls have radius of 2, 3, and 4.  .

<three>
let redball, greenball, cyanball,yellowball
function create(){
   scene.add ( redball = circle(RED) )
   redball.position.x = -13
  scene.add ( greenball = circle(GREEN,2) )
  greenball.position.x = -6
  scene.add ( cyanball = circle(CYAN,3) )
  cyanball.position.x = +3
  scene.add ( yellowball = circle(YELLOW,4) )
  yellowball.position.x = +13
}function update(){
}

<img>images/Pac-Man.png
<p>Play around with them.  Try a radius of [.5|point five] or even a tiny [.2|point two].  Maybe we’ll use the [.2|point two] circles as bullets when we write a Space Invaders Game, or use them as Pac Man food.
<p>But let’s fix the program first.  There are two things we could adjust. We could change the size of the scene xMax and yMax, or we can change the point where we test for direction change.  It’s a MUCH better idea to change the test point, because that’s what is actually going wrong.  If we change xMax and yMax, then we can’t bounce a ball of a different size.
<p>The ‘radius’ of a ball is the distance from the center to the edge.  So the important thing is that when the edge of the ball hits the wall, the center is exactly one radius away from the wall.  So we are are going to test for the center being one radius from the wall.
<br>
<p>We correct our program a bit, and bounce when we are one unit from the top or sides.  Give it a try on the code snippet with the moving origin before you look at how I did it below.
<three>
let xMax = 23.0
let yMax = 7.5
let ballRadius = 1
let dx=.5, dy=.5
let ball,bOrigin
function create (){
	 scene.add ( ball = circle(RED,ballRadius) )
	 scene.add ( origin() )
 }

function update (){
  if(ball.position.x-ballRadius<-xMax || ball.position.x+ballRadius>xMax){  // || is the OR operator
    dx = dx * -1
  }
  if(ball.position.y-ballRadius<-yMax || ball.position.y+ballRadius>yMax){
    dy = dy * -1
  }
  ball.position.x = ball.position.x + dx
  ball.position.y = ball.position.y + dy
}
<p>Look at my solution.  I created a binding called [`ballRadius`|ball radius]. I used it when I called `circle()` to create the ball, and I also used it when I tested for being near a wall.  The benefit of this is that I can change the size of my ball and the program will still work.  Try changing [`ballRadius`|ball radius] to 2, 3, or even 5.

<subtitle>Adding Sound
<img>images/sinewaves.png
<p>Sounds are complex patterns of compression waves.  A moving speaker vibrates the air, and you hear those vibrations as sounds.  Your computer is so fast that you can program tiny movements in a speaker to shape vibrations and create unique sounds.  That’s something we can explore, and maybe create a game around in the future.
<p>But for now, we are going to play short sounds in the same formats we use to play music, using  [.mp3|m p 3] or [.wav| wave] files.  Look at the code below, it should be easy to understand.  We load the sound in `create()` and play it in `update()` every time we bounce off a wall.
<three>
let xMax = 23.0
let yMax = 7.5
let ballRadius = 1
let dx=.5, dy=.5
let ball,bOrigin
let wall  // wall sound
function create (){
	wall =  loadAudio('audio/wall.wav')
	 scene.add ( ball = circle(RED) )
	 scene.add ( origin() )
  
}
  
  
function update (){
  if(ball.position.x-ballRadius<-xMax || ball.position.x+ballRadius>xMax){  // || is the OR operator
    dx = dx * -1
    	wall.play();

  }
  if(ball.position.y-ballRadius<-yMax || ball.position.y+ballRadius>yMax){
    dy = dy * -1
    	wall.play();

  }
  ball.position.x = ball.position.x + dx
  ball.position.y = ball.position.y + dy
}
<p>Here’s a couple of sound files in our collection.  Try them out. 
<pre>
audio/wall.wav
audio/ting.wav
audio/squit.mp3
audio/squit.ogg
audio/steps1.mp3
audio/blaster.mp3
audio/steps2.mp3
audio/pistol.wav
audio/meow1.mp3

<subtitle>Drawing a Rectangle
<img>images/rectangle.png
<p>A rectangle is just a fancy name for a boxy shape. We can draw a rectangle almost exactly like we draw a circle.  But we need colour and TWO paramters, the width and the height.  In our scene, width is the x value and height is the y value.  Most importantly, the CENTER of the shape is half the width from the sides, and half the height from the top and bottom.
<p>Here is a yellow box that is 3 units wide and 6 units high. 
<three>
let yellowbox
function create(){
  scene.add ( yellowbox = rectangle(YELLOW,3,6) )
 scene.add (origin())
}
function update(){
}
<p>Let’s call it a paddle because we need a paddle to play Pong.  Let’s make it smaller and narrower.  And let’s put it in a more reasonable place, half a unit from the left wall. Look at how we do the calculations to position the paddle.
<three>
let xMax = 23.0
let yMax = 7.5
let paddle, myOrigin
let paddleWidth = 1
function create(){
  scene.add ( paddle = rectangle(YELLOW,paddleWidth,4) )
 scene.add (myOrigin = origin())
paddle.position.x = -xMax + 0.5 + (paddleWidth/2)
myOrigin.position.x = -xMax + 0.5 + 1/2
}
function update(){
}
<p>To get a nice half-unit gap between the left wall and the right side of the paddle, we start at the left wall which is [-xMax|minus x max]. Then we ADD the gap of [0.5|point 5] units.  Adding to a negative number makes it smaller, moving us to towards the right.  Then we position the paddle, but we can’t put it right there.  We have to put the center of the paddle somewhere so the left edge of the paddle is there.  To do that, we add HALF the width of the paddle, because  to move right to the center of the paddle.  Here’s the key statement:
<pre>
paddle.position.x = -xMax + 0.5 + (paddleWidth/2)

<p>I have put the origin over the center of the paddle for `paddleWidth = 1`, but it won’t move if you change `paddleWidth` to 2 or 3.  Try it.  If the wider shape had been centered at the origin, the gap would have disappeared.  Make sure you understand why knowing the center of shapes is important.
<p>Eventually we will want to bounce a ball off the right side of the paddle.  That is simply:
<pre>
paddle.position.x = -xMax + 0.5 + paddleWidth
<p>Try moving the origin to the center TOP of the paddle. You have to do a simple calculaton and then set [`myOrigin.position.y`|my origin dot position dot y].

<subtitle>Using the Keyboard

<p>Your keyboard sends a series of ‘events’ to your game. When you tap on a key, it sends a ‘keydown’ event, and then a ‘keyup’ event.  To use the keyboard, you set up a ‘listener’ and keep track of the events you want.  That listener should be OUTSIDE your `update()` function.
<p>The program below sets up a listener for ‘keydown’ and puts the codes out to `console.log()`.  Try it out. What happens when you hold a key down?  What if you press SHIFT and a key?   What do the arrow keys do?  Try changing the code to use ‘keypress’ or ‘keyup’ events.
<p>You should probably click on something outside the editor (like this text), because the editor is also listening for keystrokes and will think you are changing the program.    Remember if you want to restore the code, just  refresh your brower.
<three>
function create(){
}
function update(){
let char = getLastChar()
if(char !== ‘’) console.log(char)
}

<p>The two keys I want for the Pong game are `ArrowUp` and `ArrowDown`.
<p>I have added some code to keep the paddle on the screen based on [`paddleHeight`|paddle height] and [`yMax`|y max].  Without it, the up or down arrows would sent the paddle out of our view.
<three>
let xMax = 23.0
let yMax = 7.5
let paddle
let paddleWidth = 1, paddleHeight = 4
function create(){
	scene.add ( paddle = rectangle(YELLOW,paddleWidth,paddleHeight) )
	let x = -xMax + 0.5 + (paddleWidth/2)	// calculate the paddle center
	paddle.position.x = x 
	scene.add (origin(x,0))   // show the paddle center
}
function update(){
	let char = getLastChar()
	if(char == ‘ArrowUp’ && paddle.position.y + paddleHeight/2 < yMax){
		paddle.position.y += .3
	}
	if(char == ‘ArrowDown’ && paddle.position.y - paddleHeight/2  > -yMax){
		paddle.position.y -= .3
	}
}

<subtitle>Keeping Score
<p>You can paint numbers or words onto the screen, which allows you to keep score and call the end of the game. 
<p>Placing text in a scene is the same as placing a shape.  I’ve added an `origin()` so you can see how it is positioned.  But there is a new trick we need to know about. You can’t change the text once it is on the screen, you have to remove it from the scene, and then place a new text into the scene.
<p>This is true for shapes as well.  You can’t change the colour or size of a shape in a scene, you have to remove it and then replace it.  But as you can see, this isn’t very hard.  Try switching the red ball with a yellow ball, and back again, every time it hits the ends.  (Hint: you have to create new bindings to remember [`position.x`|position dot x] and [`position.y`|position dot y] for the instant that you don’t have a ball).
<p>`Scoreboard` is the image you put in the scene.  This program keeps the score itself in `score`.  You can’t get the score back from `Scoreboard`.
<three>
let xMax = 23.0
let yMax = 7.5
let ballRadius = 1
let dx=.5, dy=.5
let ball
let score = 0
let scoreboard
function create (){
	 scene.add ( ball = circle(RED,ballRadius) )
	 scene.add ( origin(-16,4) )	
	scene.add (scoreboard = text(CYAN,-16,4,score)) 
}

function update (){
  if(ball.position.x-ballRadius<-xMax || ball.position.x+ballRadius>xMax){  // || is the OR operator
	dx = dx * -1
	if(ball.position.x < 0) {   // left (paddle) side of wall
		score += 1
		scene.remove(scoreboard)
		scene.add (scoreboard = text(CYAN,-16,4,score)) 
	}
  }
  if(ball.position.y-ballRadius<-yMax || ball.position.y+ballRadius>yMax){
	dy = dy * -1
  }
  ball.position.x = ball.position.x + dx
  ball.position.y = ball.position.y + dy
}
<p>Did you notice that we put an `if()` inside another `if()`?  We could have created a complicated condition using the same logic as we use to see if it is time to bounce, but we already had that.


<subtitle>Challenge Problem

<p>This is the end of this lesson.  There is a challenge problem at the end of each lesson, and you can probably guess what it is.  Put all the pieces together.  Decide whether the ball has hit the paddle.  If it misses, play the fail sound.  Tweak the different values until your game is fun to play.

<p>When you have this problem solved, you must show it to a Proctor and discuss your solution.  He or she will then unlock the next lesson for you.  A Proctor is like a coach, a teaching assistant, and a software tester in one, they are here to help you, and you can contact them anytime for help. For now, Tom Berend is the only Proctor.

<p>Don’t worry if you can’t finish this program in one sitting, the challenge code editor (in blue) will remember where you were.



<cm(proctor)>
<three>
let xMax = 23.0
let yMax = 7.5
let ball, paddle, scoreboard, score=0
let dx=0.4, dy=0.3
let ballRadius = 1, paddleWidth = 1, paddleHeight = 4
let wall  // wall sound
let goal // scored a goal sound
function create(){
	wall =  loadAudio('audio/wall.wav')
	goal = loadAudio(‘audio/pistol.wav’)
	 scene.add ( ball = circle(RED,ballRadius) )
	scene.add ( paddle = rectangle(YELLOW,paddleWidth,paddleHeight) )
	scene.add (scoreboard = text(CYAN,-16,4,score)) 
	let x = -xMax + 0.5 + (paddleWidth/2)	// calculate the paddle center
	paddle.position.x = x 
}
function update(){
	let char = getLastChar()
	if(char == ‘ArrowUp’ && paddle.position.y + paddleHeight/2 < yMax){
		paddle.position.y += .3
	}
	if(char == ‘ArrowDown’ && paddle.position.y - paddleHeight/2  > -yMax){
		paddle.position.y -= .3
	}
  	  if(ball.position.x-ballRadius < -xMax || ball.position.x+ballRadius > xMax){  // || is the OR operator
		dx = dx * -1
		if(ball.position.x < 0){
			goal.play()
			ball.position.x = 0
			ball.position.y = 0
			score += 1
			scene.remove (scoreboard)	// update the scoreboard 
			if(score==3){
				scene.add (scoreboard = text(CYAN,-16,4,”Game Over”)) 
				dx=0 		// stop moving the ball
				dy=0
			}else{
				scene.add (scoreboard = text(CYAN,-16,4,score)) 
			}			

		}else{
			wall.play();
		}
	  }
	  if(ball.position.y-ballRadius < -yMax || ball.position.y+ballRadius > yMax){
		dy = dy * -1
	    	wall.play();
	  }
	ball.position.x = ball.position.x + dx
	ball.position.y = ball.position.y + dy
}
