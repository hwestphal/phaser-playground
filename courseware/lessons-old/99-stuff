<subtitle>BabylonJS
<p(img=babylon.jpg)>
Our goal at the end of this course is for you to be comfortable using tools like the awesome 
[BabylonJS| Babylon J S|https://www.babylonjs.com] rendering engine.  Check it out!
<p>Babylon is a sprawling empire, but it takes a long time to learn, even for experts with the math skills of Star Fleet Navigators. You quickly get lost in the complexity and layers of possibilities, and sometimes never actually write a game.
<p>Check out this example in the [BabylonJS Playground|Babylon J S | https://playground.babylonjs.com/#609QKP#7]. (Drag your mouse to move the camera, WASD to steer.)  Every bit of the code is there, but the learning curve is steep.  Here is the author [asking for help|asking for help|https://forum.babylonjs.com/t/real-physics-enabled-racing-game/4034].
<p>We'll get you there, but in small steps.





<p(h2)>[W3Schools | w 3 schools]
<p>There are excellent free resources on the web for learning JavaScript, and we are going to point you at them rather than replicate them.  One of the best is [W3Schools | W 3 Schools|https://www.w3schools.com], which features straightforward explanations and ^Try It Yourself^ example buttons.
<p>Please take a few minutes and work through the W3Schools page on JavaScript [operators | operators | https://www.w3schools.com/js/js_operators.asp].  Try every example, and make modifications.
<p>^NOTE^ W3Schools uses old-fashioned `var` to declare a variable.  You should use 'let' instead.


<p(h1)>Primitive Types in JavaScript
<p>There are seven primitive ^types^ in JavaScript, but only two are important for now.  They are ^string^ and ^number^. (Many older websites will say there are six primitives.  ^bigint^ was only added in 2020.)
<p>We call them `primitive` because they are the basic building blocks of our data, like data atoms.  We will build complex types out of them.





<subtitle>Our Teaching Terminal


<p(img=vt52.jpeg)>To help present this course, we built a 'terminal' that behaves a little bit like an old-fashioned [VT-52 | v t fifty two | https://en.wikipedia.org/wiki/VT52] terminal.  

<p>Here's a short program that will print 'Hello World' in the Canvas Window at the lower right.

<code>
let app = new Baby()
let vt = app.VT52()
vt.print('Hello World')

<p>There's a lot going on here.  Let's break it down.







<p>The first line tells your browser "Bring in a module called `Baby`, and assign it to `app`.  Again, think of this assignment as a tentacle reaching from `app` to hold onto `Baby`.  

<p>Baby is a simple library we wrote to help present this course.  By the end of the course, we hope you'll be able to write your own library.

<p>The second line says [`let vt = app.VT52()` | let v t gets app dot v t fifty two].  It says to create a variable called [`vt` | V T], then run a function in the Baby module called [VT52 | v t fifty two] and throw a tentacle from [`vt` | V T] to hold on to the result. Notice that we read the equal sign as 'gets', not as 'equals'.

<p>Running the function `app.VT52()` sets up our VT52 terminal and prepares it for use.  A green box will appear on the lower right screen.

<break>

<p>The third line say [^vt.print('hello world')^ | v t dot print open bracket open quote hello world close quote close bracket].  It tells your browser to feed the string 'Hello World' to a method called print that is part of the object pointed at by ['vt'| v t].

<p>That looks a lot like our other friend `console.log('hello world')`, except that console.log was already included in our toolbox.  Exactly right.  But now we have BOTH the terminal and the console, so we can write code in one and debug in the other.

<p>This piece of code uses objects and methods,  We are soon going to talk about how to build and use objects and methods.  But for now, let's just run this program.  Here it is again.

<code>
let app = new Baby()
let vt = app.VT52()
vt.print('Hello World')

<break>
<p>There are two buttons beside the small program below.  One of them will #copy# the program to the 'Editor' panel on the upper right side, where you can modify it.  The second will #run# it in the 'Canvas' panel on the lower right side.
<p> 



<p(h2)>What is Your Name?

<p>Try running this program.  And run it again with a different name.  Play with the prompt string.  Add a `console.log()` statement so you have both outputs doing something.

<code>
let app = new Baby()
let vt = app.VT52()
let name = globalThis.prompt('What is your name?')
vt.print('Hello '+ name)

<p>Now it feels like we are communicating with the computer. We are almost ready to write our first game.  
























