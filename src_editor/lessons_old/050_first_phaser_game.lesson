<title>First Phaser Game

<p>There are three
functions in this code snippet, called `preload()`, `create()`, and `update()`.  Those three functions are
part of EVERY Phaser game. We will add our
own code into those three functions to build our game.  An empty game with the three function calls looks like this.

<phaser>
function preload (){
}

function create (){
}

function update (){
}

<p>Let's fire up an image of a red ball.  We need TWO lines, one in the
`preload()` and one in the `create()` functions.

<phaser>
function preload ()  {
  this.load.image('ball', 'assets/sprites/orb-red.png');
}

function create (){
  var myBall = this.add.image(400, 100, 'ball');
}

function update (){
}


<p>Were you able to see the red ball?  The game runs the `preload()` function to load
sounds and images ('assets').
The red ball is a picture that lives somewhere on the internet and has to be brought into
the game.  That can take a long time (at least it SEEMS like a long time if you are a
computer).  As soon as all the assets are available, the game runs the `create()` function.

<p>The statement `this.load.image('ball', 'assets/sprites/orb-red.png')`
fetchs the image of a red ball called `orb-red.png` that lives in the directory `assets/sprites`.
We have given it the name 'ball'.

<p>Immediately after the game finishes the code in `preload()`, it runs the code in the `create()` function.

<p>The statement `this.add.image(400, 100, 'ball')` paints the ball on the screen at location
`(400,100)`.  This screen runs from the top left corner `(0,0)` to the bottom right
corner `(800,200)`, with the first value describing left-right and the second describing up-down.
By convention, we call the left-right value `x` and the up-down value `y`.

<p>We used the `var myBall =` to create a binding, so that we can play with our ball.  The ball would
appear if we left out the binding, but we wouldn't be able to reach the ball to play with it.

<p>Now we can use that binding to ask the ball where it is.

<phaser>
function preload ()  {
  this.load.image('ball', 'assets/sprites/orb-red.png');
}

function create (){
  var myBall = this.add.image(400, 100, 'ball');
  console.log("the x value is " + myBall.x)
  console.log("the y value is " + myBall.y)
}

function update (){
}

<p>And here's the magic. We can change the x and y values, and the ball will move.  We do that in the
`update()` function, which the game calls again and again.  Let's move the ball to the right, by increasing
the x value.

<phaser>
let myBall

function preload ()  {
  this.load.image('ball', 'assets/sprites/orb-red.png');
}

function create (){
  myBall = this.add.image(400, 100, 'ball');
  console.log("the x value is " + myBall.x)
  console.log("the y value is " + myBall.y)
}

function update (){
  if(myBall.x > 800){  // if the ball is past the right edge of the screen
    myBall.x = 0      // put it on the left edge of the screen
    }
  myBall.x = myBall.x + 1   // move it one position to the right
}



<subtitle>The environment

<p>Let's review.  _Values_ are chunks of bits that each have a  _types_.  The simple types are _Number_, _String_, and _Boolean_.  A _binding_ is a named tentacle that may point to a _value_.    Are you solid on this?

<p>When a program starts up, there are always existing bindings that are part of JavaScript.  Other bindings help interact with the surrounding system. For example, in a ((browser)), there are functions to interact with the currently loaded website and to read ((mouse)) and ((keyboard)) input.

<p>There are hundreds of functions that you have access to, and we're going to start using them without really understanding them for now.

<p>We've already seen one such function, called `console.log()`.   Here's another one called `prompt()` that shows a little ((dialog box)) asking the user to type something, and passes back that string to your program.

<cm>
let secret = prompt("Enter passcode")
console.log(secret)


<p>Functions seem to be special names followed by brackets (called 'parentheses').  But it's the other way around, the brackets are the important part and the name is just a binding tentacle like any other.

<p>Values in the brackets (called _((argument))s_.) are passed to the function, which does something with them and optionally returns a result.   `prompt()`  has two arguments, the second one is an optional string.  Try adding the second parameter above, and see what it does.
