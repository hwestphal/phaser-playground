
/** @ignore */
declare type Observer = (msg?: object) => void;
/** For many games, `Baby()` is the only class you need to import.
*
* ```ts
* import { Baby } from 'Baby'
* app = new Baby()    // create an instance of Baby<br><br>
* ```
* @remarks
*
*
* Then create the objects and events you need with methods like:
*
*  ```ts
* floor = app.floor(20,20)               // lay down a floor
* cube = app.shape('cube').color('red')  // add a red cube
*
* // hook the keyboard, and move the cube on each keypress
* app.keydown((data)=>{ cube.move('right',1) })
* ```
*
* <br><br>That's a pretty simple game, but it runs just fine.  We
* explain it in the 'Getting  Started' tutorial.
*/
declare class Baby {
/** @ignore */
runUnittests: boolean;
/** @ignore */
onSignal: Function;
/** @ignore */
babyEngine: BabyEngine;
/** @ignore */
observers: {
[type: string]: Observer[];
};
/** @ignore */
uuidValue: number;
/** Origin is an invisible non-colliding shape at the origin (0,0,0).
* @remarks
* It is so frequently necessary to find the origin point (the center of
* the floor where new shapes are instantiated) that we
* added an invisible cube there for you.  You could have done it yourself
* with the following line of code.
* ```ts
* const origin = this.shape('cube').opacity(0, 0)  // make invisible in zero time
* ```
*/
origin: BabyShape;
/** Start here.  `Baby()` is the only class you need to import.
*
* ```ts
* import { Baby } from 'wherever'
* app = new Baby()    // create an instance of the Baby engine.
* ```
*
* The optional parameter sends code to the game.  It's only intended for writing tutorials.
*/
constructor(src?: string);
version(): string;
/** @ignore */
signal(msg: string, value?: number): void;
/** freezes the scene while keeping the engine running; expecially useful with the inspector.
* @remarks
* ```
* Add a button to freeze your sceen:
*    let frozen = false
*    app.GUI('button')
*        .position('BottomLeft')
*        .text('Freeze')
*        .onClick(() => {
*            app.freeze(!frozen)
*            frozen = !frozen;
*        })
* ```
*/
freeze(onOff?: boolean): Baby;
/** trap keydown, look at the data object for ctrl-, alt-, etc */
keydown(keyFunction: Function): Baby;
/** trap keypress, look at the data object for ctrl-, alt-, etc */
keypress(keyFunction: Function): Baby;
/** trap keyup, look at the data object for ctrl-, alt-, etc */
keyup(keyFunction: Function): Baby;
multiPlayer(): Baby;
/** Create an 'Shape', which is a single graphic element.  `Baby.Shape('Cube') is the same as calling `Baby.Cube()`,
* but not all shapes have direct calls and you can add new shapes.
* The standard shapes are cube, sphere, cylinder, cone, torus, capsule, point, and floor. */
shape(model: string): BabyShape;
/** Create a Cube (which you can resize into a cuboid) */
cube(): BabyShape;
/** Create a Sphere (which you can resize into an spheroid */
sphere(): BabyShape;
/** Create a Cylinder */
cylinder(): BabyShape;
/** Create a Cone (strictly speaking, an cone is a cylinder) */
cone(): BabyShape;
/** Create a Capsule */
capsule(): BabyShape;
/** Create a Torus */
torus(): BabyShape;
/** Create a Point (think of a sphere that is too small to see) */
point(): BabyShape;
/** Add a floor object with  a default grid. Use .collide('solid') if you want to bounce off it. */
floor(xSize: number, ySize: number, major?: number): BabyShape;
/** A 'camera' defines the player, a multi-player game may have multiple cameras.
* This is the default 3D camera, look at `OrthoCamera` for 2D
*/
camera(): BabyCamera;
/** Turn on the BabylonJS Inspector.  Only for player0.
* only valid parameter at this point is 'record', which captures the first 7 seconds of your game in video
*/
inspector(stringParm?: string): Baby;
/** random integer between min (includes) and max (excludes).  so randomIntBetween(2,5) might return 2,3, or 4, but not 5. */
randomIntBetween(min: number, max: number): number;
/** Create a 'Button'.  */
GUI(model: 'button'): BabyGUI;
/** dispose of the scene, releasing all meshes, animations, etc */
dispose(): void;
}

declare class BabyGUI extends BabyThing {
color: string;
background: string;
border: string;
leftRight: number;
topBottom: number;
constructor(model: string, baby: Baby, babyEngine: BabyEngine);
/** role sets the color, eg Primary is blue, Danger is red.  This follows Bootstrap's model. */
role(role: string): BabyGUI;
/** position is one of the eight side/corner positions or 'Center'. eg: 'TopLeft' */
position(position: string): BabyGUI;
/** the message to display */
text(text: string, resize?: boolean): BabyGUI;
onClick(func: Function): BabyGUI;
}

/** superclass for BabyShape, BabyCamera and BabyButton */
declare class BabyThing {
model: string;
uuid: number;
baby: Baby;
babyEngine: BabyEngine;
lastTween: Tween;
collideCallback: Function;
clickCallback: Function;
onPressDown: Function;
constructor(model: string, babyEngine: BabyEngine);
animatedGif(resultion?: number): BabyThing;
/** Returns a promise that resolves when the LAST issued tween is completed.  Use it as  `await thing.move(...).done()` */
done(): Promise<void>;
/** Returns a promise that resolves when no tweens remain active.  Use it as  `await thing.isIdle()` */
isIdle(): Promise<void>;
}
declare class BabyShape extends BabyThing {
constructor(model: string, babyEngine: BabyEngine);
/** a callback when an ACTIVE shape collides with an ACTIVE or PASSIVE shape
* note: if two ACTIVE shapes collide, they BOTH get a callback notification
* eg:  myBall.onCollide((other)=>{      // other is a BabyMesh object
*               if(other == hisBall){  doSomething()  }
*         })
*/
onCollide(callback: Function): BabyShape;
/** a callback when the mouse clicks this shape.
* eg:  myBall.onClick(()=>console.log("I was clicked"))
*/
onClick(callback: Function): BabyShape;
addAxes(): BabyShape;
dispose(): BabyShape;
/** turn collisions on or off.  'active' will turn on gravity and mass. */
collide(collider?: 'ghost' | 'solid' | 'active'): BabyShape;
/**  Move an entity  */
move(direction: 'forward' | 'backward' | 'left' | 'right' | 'up' | 'down', distance: number, duration?: number, animate?: '1-Begin And End Normally' | '2-Begin Slow, End Fast' | '3-Begin Fast, End Slow' | '4-Begin And End Fast' | '5-Begin And End Slow'): BabyShape;
/**  MoveAndTurn - moves in an arc (the turn affects the move)  */
moveAndTurn(moveDirection: 'forward' | 'backward' | 'left' | 'right' | 'up' | 'down', distance: number, turnTowards: 'forward' | 'backward' | 'left' | 'right' | 'tiltLeft' | 'tiltRight', angle: number, duration?: number, animate?: '1-Begin And End Normally' | '2-Begin Slow, End Fast' | '3-Begin Fast, End Slow' | '4-Begin And End Fast' | '5-Begin And End Slow'): BabyShape;
/**  MoveToward- moves towards another shape.  Often getDistanceTo(other) is useful.  */
moveToward(other: BabyShape, distance: number, duration?: number, animate?: '1-Begin And End Normally' | '2-Begin Slow, End Fast' | '3-Begin Fast, End Slow' | '4-Begin And End Fast' | '5-Begin And End Slow'): BabyShape;
moveToZero(duration?: number, animate?: '1-Begin And End Normally' | '2-Begin Slow, End Fast' | '3-Begin Fast, End Slow' | '4-Begin And End Fast' | '5-Begin And End Slow'): BabyShape;
/**  Turn an entity  (1 is a full turn)
*
* @remarks
* You get different results from the two cases below, because in the second case
* the box waits to finish the first turn before starting the second.  Even if you
* do the turns in zero-time, you cannot be sure which will be performed first unless
* you wait. Consider using the 'legacy' function `setRotation()`.
*
*
* ```
* box.turn('forward',.25)
* box.turn('left',.25)
* ```
* and
* ```
* await box.turn('forward',.25).done()
* box.turn('left',.25)
* ```
*/
turn(towards: 'forward' | 'backward' | 'left' | 'right' | 'tiltLeft' | 'tiltRight', angle: number, duration?: number, animate?: '1-Begin And End Normally' | '2-Begin Slow, End Fast' | '3-Begin Fast, End Slow' | '4-Begin And End Fast' | '5-Begin And End Slow'): this;
turnToSame(other: BabyShape, duration?: number, animate?: '1-Begin And End Normally' | '2-Begin Slow, End Fast' | '3-Begin Fast, End Slow' | '4-Begin And End Fast' | '5-Begin And End Slow'): this;
turnToZero(duration?: number, animate?: '1-Begin And End Normally' | '2-Begin Slow, End Fast' | '3-Begin Fast, End Slow' | '4-Begin And End Fast' | '5-Begin And End Slow'): this;
/**
* Size or resize an entity  (same as Babylon 'scale' for simple shapes)
*/
size(size: number | number[], duration?: number, animate?: '1-Begin And End Normally' | '2-Begin Slow, End Fast' | '3-Begin Fast, End Slow' | '4-Begin And End Fast' | '5-Begin And End Slow'): BabyShape;
/**
* Sets diffuse color (the essential color under white light).  For controls
* on ambient, emmisive, or specular color, use 'setColor()'
* @param {diffuseColor} string is one of 140 HTML color names eg: 'mediumvioletred'
*/
color(diffuseColor: string, duration?: number, animate?: '1-Begin And End Normally' | '2-Begin Slow, End Fast' | '3-Begin Fast, End Slow' | '4-Begin And End Fast' | '5-Begin And End Slow'): BabyShape;
/** Sets opacity between 0 (transparent) and 1 (solid) */
opacity(opacity: number, duration?: number, animate?: '1-Begin And End Normally' | '2-Begin Slow, End Fast' | '3-Begin Fast, End Slow' | '4-Begin And End Fast' | '5-Begin And End Slow'): BabyShape;
/** Creates a skeleton frame on a shape */
addSkeleton(): BabyShape;
/** Adds to a shape that has a skeleton */
attachTo(other: BabyShape): BabyShape;
/** Kill any in-progress moves (usually because of a collision).  Turns are not affected. 'Await' will fire if anyone is waiting. */
break(): BabyShape;
/** Set positon of this shape immediately.  This is the Babylon way of moving shapes.  It is
* particularly useful for setting an initial position
*/
setPosition(leftRight: number, upDown: number, frontBack: number): BabyShape;
/** modify positon of this shape immediately.  This is the Babylon way of moving shapes.  */
addToPosition(leftRight: number, upDown: number, frontBack: number): BabyShape;
/** set direction of this shape immediately.  This is the Babylon way of rotating shapes.
* The absolute values of the numbers aren't important.  (0,1,0) is the same as (0,100,0).
* Rotations are performed around the x, y, z axis in order.
* */
setRotation(leftRight: number, upDown: number, frontBack: number): this;
/** modify rotation of this shape immediately.  This is the Babylon way of rotating shapes. A quarter-rotation is .25, as usual */
addToRotation(leftRight: number, upDown: number, frontBack: number): this;
/** drop a pen, and start creating a 3d line in space */
penDown(radius?: number): this;
/** raise the pen, stop drawing a 3d line */
penUp(): this;
/** erase a line created with `penDown` and `penUp` */
lineErase(): this;
/** position of this thing at this instance */
getPosition(): Vector3;
/** direction of this thing at this instance */
getRotation(): Vector3;
/** scale of this thing at this instance */
getScale(): Vector3;
/** distance to another shape (center-to-center, so watch out if you have resized one of them) */
getDistanceTo(otherShape: BabyShape): number;
}
declare class BabyCamera extends BabyThing {
constructor(model: string, babyEngine: BabyEngine);
/**  Move an entity  */
move(direction: 'forward' | 'backward' | 'left' | 'right' | 'up' | 'down', distance: number, duration?: number, animate?: '1-Begin And End Normally' | '2-Begin Slow, End Fast' | '3-Begin Fast, End Slow' | '4-Begin And End Fast' | '5-Begin And End Slow'): BabyCamera;
/**  MoveToward- moves towards another shape.  Often getDistanceTo(other) is useful.  */
moveToward(other: BabyShape, distance: number, duration?: number, animate?: '1-Begin And End Normally' | '2-Begin Slow, End Fast' | '3-Begin Fast, End Slow' | '4-Begin And End Fast' | '5-Begin And End Slow'): BabyCamera;
moveToZero(duration?: number, animate?: '1-Begin And End Normally' | '2-Begin Slow, End Fast' | '3-Begin Fast, End Slow' | '4-Begin And End Fast' | '5-Begin And End Slow'): BabyCamera;
/** set camera mode to Orthographic (ie: not Perspective) */
setOrthographic(orthoSize?: number): this;
/** set camera mode to Orthographic (ie: not Perspective) */
setActive(player?: number): this;
}

