import { V2 } from './v2'
import { Observable, Observer } from './paon'

///////////////////////////////////////////////////////////////////////
// palette
// https://digitalsynopsis.com/design/beautiful-color-palettes-combinations-schemes/

// beach towel
const COLOR1 = '#fe4a49'   // red
const COLOR2 = '#2ab7ca'   // blue
const COLOR3 = '#fed766'   // yellow
const BKGND = '#e6e6ea'
const CLEAR = '#f4f4f8'


///////////////////////////////////////////////////////////////////////

export class Canvas {
    public canvas: HTMLCanvasElement
    public ctx: CanvasRenderingContext2D

    public height: number = 1024
    public width: number = 1280

    public x: number = 0

    // use mouseObservable to share BOTH kybd and mouse events with subclasses
    public mouseObservable: Observable // Observer Pattern component
    public kybdObservable: Observable
    public animationObservable: Observable

    constructor(canvasTag: string) {
        console.log(`in Canvas construtor for tag '${canvasTag}'`)

        this.canvas = document.getElementById(canvasTag) as HTMLCanvasElement
        let temp = this.canvas.getContext('2d')
        if (temp !== null) {
            this.ctx = temp
        } else {
            throw (`can't find canvas tag ${canvasTag}`)
        }

        //    // find out more about the canvas...

        let c = document.getElementById('container')
        if (c !== null) {
            let containerX = c.offsetLeft
            let containerY = c.offsetTop
        } else {
            throw (`can't find element 'container'`)

        }
        // console.log(`container offset x=${containerX},y=${containerY}`)

        // some devices might scale, so scaleX/Y will not be close to 1
        let rect = this.canvas.getBoundingClientRect() // position of canvas

        this.width = this.canvas.width
        this.height = this.canvas.height

        let scaleX = this.width / rect.width    // relationship bitmap vs. element for X
        let scaleY = this.height / rect.height
        // console.log(`scale x=${scaleX},y=${scaleY}`)


        /// this section sets up keyboard and mouse events for this canvas
        this.mouseObservable = new Observable() // watch for input field to fill
        this.kybdObservable = new Observable()
        this.animationObservable = new Observable()

        // add event listeners
        this.canvas.addEventListener('mousedown', this.canvasMousedown.bind(this))
        document.addEventListener('keypress', this.canvasKeypress.bind(this))
        window.requestAnimationFrame(this.canvasAnimation.bind(this))

    }

    //  not used yet, not tested yet
    removeListeners() {
        this.canvas.removeEventListener('mousedown', this.canvasMousedown)
        document.removeEventListener('keypress', this.canvasKeypress)
    }


    canvasAnimation() {
        // if (!start) start = timestamp;
        // var progress = timestamp - start;
        // element.style.transform = 'translateX(' + Math.min(progress / 10, 200) + 'px)';
        // if (progress < 2000) {
        this.animationObservable.notifyObservers('tick', event)
        window.requestAnimationFrame(this.canvasAnimation.bind(this))
    }


    canvasKeypress(event: KeyboardEvent) {
        // console.log('in canvasKeypress event', event)
        this.kybdObservable.notifyObservers('keypress', event)
    }

    canvasMousedown(event: MouseEvent) {
        // console.log('in canvasMousedown event', event)
        this.mouseObservable.notifyObservers('mousedown', event)
    }


    /* if a mouse has landed, this retrieves the point relative to this canvas */
    getMouseXY(event: MouseEvent): V2 {

        // console.log(`canvas x=${this.canvas.width},y=${this.canvas.height}`)
        let rect = this.canvas.getBoundingClientRect() // position of canvas
        let canvasX = event.pageX - rect.left  // now relative within canvas
        let canvasY = event.pageY - rect.top
        // console.log(`mouse x=${canvasX},y=${canvasY}`)

        // event.offset is more accurate, but not always available
        if (event.offsetX) {    // for webkit browser like safari and chrome
            canvasX = event.offsetX
            canvasY = event.offsetY
            // console.log(`event offset x=${canvasX},y=${canvasY}`)
        }

        return new V2([canvasX, canvasY])

    }


    clearCanvas() {
        this.ctx.fillStyle = BKGND
        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height) // clear canvas
    }
}




/** contains useful objects for ALL math drills */
class DrillTools extends Canvas {

    // left 50 px is for timer
    // right 50 px is for score
    // top 50 px between timer and score is for description
    // bottom 50 px between timer and score is for keys
    // middle is for the challenge

    public keyList: string[] = [] // list of input keys displayed
    public keyX: number[] = [] // x offset for key on keyboard

    // these are for numberInputBox
    public startTime: number = 0// milliseconds
    public maxTime: number = 0 // seconds
    public overTime: boolean = false// set to true if went overtime
    public errorKey: boolean = false // set to true if ANY wrong keys
    public inputBoxPosition: V2 = V2.zero
    public expectedValue: string = ''

    public collectedValue: string = ''
    public answerReceived: Observable

    public currentQuestion: IQuestion = iQuestionFactory(0, 0, 0, 0)

    constructor(canvasTag: string) {
        super(canvasTag)

        // // set up before adding event listeners, so an early mouse click won't kill us
        // this.expectedValue = '$$$'
        console.assert(this.canvas.width === 1000, 'expect Drill canvas to be 1000 px wide')
        console.assert(this.canvas.height === 300, 'expect Drill canvas to be 300 px high')

        // subscript to mouse and keyboard events
        this.mouseObservable.addObserver('mousedown', this.mouseSoftKey, this)
        this.mouseObservable.addObserver('keypress', this.kybdKey, this)
        this.animationObservable.addObserver('tick', this.animate, this)
        // and publish when we have a new key (mouse or kybd)
        this.answerReceived = new Observable()

    }

    kybdKey(event: KeyboardEvent) {
        console.log('kybdKey', event.key)
        this.processIfValidNextKey(event.key)
    }

    mouseSoftKey(event: MouseEvent) {
        // console.log('mouseSoftKey', event)

        let point = this.getMouseXY(event)
        // console.log(`mouse x=${point.x},y=${point.y}`)
        let result = ''
        this.keyList.forEach((key, i) => {
            if (point.x > this.keyX[i]
                && point.x < this.keyX[i] + 40
                && point.y > this.canvas.height - 50
                && point.y < this.canvas.height) {

                // got a softkey from canva.
                // 'DRILL' will only process if valid
                this.processIfValidNextKey(this.keyList[i])
            }
        })

    }

    numberInputBox(goodInput: boolean = true) {   // if not goodInput then flash red

        // characters are about 50 * 80
        let size = this.expectedValue.length * 50

        let x1 = this.currentQuestion.inputBoxPosition.x
        let y1 = this.currentQuestion.inputBoxPosition.y
        let x2 = size
        let y2 = 80

        let background = COLOR2
        if (!goodInput) {
            background = COLOR1
        }

        this.ctx.fillStyle = background
        this.ctx.fillRect(x1, y1, x2, y2)

        this.ctx.font = "bold 80px Arial"
        this.ctx.fillStyle = "black"
        this.ctx.textAlign = "left"
        //        this.ctx.strokeRect(x1, y1, x2, y2)
        this.ctx.fillText(this.collectedValue, x1 + 10, y1 + 68)

    }

    /** draw all the elements of the drill, ready for specific drills... */
    setupDrill(keyString: string) {
        let x1, y1, x2, y2

        // console.log('in setupDrill')
        this.clearCanvas()

        // set up the timer
        x1 = 0
        y1 = 0
        x2 = 50
        y2 = this.canvas.height
        this.ctx.fillStyle = COLOR3
        this.ctx.fillRect(x1, y1, x2, y2)

        // set up the scoreboard
        x1 = this.canvas.width - 50
        y1 = 0
        x2 = this.canvas.width
        y2 = this.canvas.height
        this.ctx.fillStyle = COLOR3
        this.ctx.fillRect(x1, y1, x2, y2)

        // set up the keyboard
        x1 = 50  // inside
        y1 = this.canvas.height - 50
        x2 = this.canvas.width - x1 - 50
        y2 = this.canvas.height
        this.ctx.fillStyle = COLOR3
        this.ctx.fillRect(x1, y1, x2, y2)

        // draw the keyboard (keylist) at height ky
        this.keyList = keyString.split('')
        this.drawKeyboard(this.keyList, y1)
    }


    drawKeyboard(keyList: string[], ky: number) {
        let x1 = 50  // inside
        let x2 = this.canvas.width - x1 - 50
        let kmin = x1 + 50 // start after a buffer
        let kmax = x2 - 50  // width includes buffer too

        // calc the keyX positions for each key
        this.keyX = keyList.map((x, i) => kmin + (kmax / this.keyList.length) * i)

        // draw the keys (in boxes)
        this.ctx.font = "bold 30px Arial"
        this.ctx.fillStyle = "black"
        this.ctx.textAlign = "left"
        this.ctx.lineWidth = 3

        this.keyList.forEach((key, i) => {
            this.ctx.strokeStyle = COLOR2
            this.ctx.strokeRect(this.keyX[i], ky + 5, 40, 40)
            this.ctx.fillText(key, this.keyX[i] + 10, ky + 35)
        })
    }


    // may have been a keyboard or mouse event, only care if it is 'valid'
    processIfValidNextKey(key: string) {
        let validNext = this.expectedValue.slice(this.collectedValue.length, this.collectedValue.length + 1)
        if (validNext === key) {
            // towards a right answer
            this.collectedValue = this.collectedValue.concat(key)
            this.numberInputBox() // refresh the screen

            // if we have fully collected the value, then fire the observable pattern
            if (this.expectedValue === this.collectedValue) {
                this.answerReceived.notifyObservers('answer')
            }
        } else {
            // flash an error message
            this.numberInputBox(false) // refresh the screen showing an error for half a second
            setTimeout(() => {
                this.numberInputBox() // now correct it to normal
            }, 500)
        }
    }

    animate() {
        // if the timer is running, then stretch it out
        if (!this.overTime) {  // we are still in the timing zone
            let now = Date.now()
            let limit = this.startTime + (this.maxTime * 1000)


            if (now > limit) {  // we crossed over
                this.overTime = true
                // paint the timer box red
                this.ctx.fillStyle = COLOR1
                this.ctx.fillRect(0,
                    0,
                    50,
                    this.canvas.height)

            } else {
                let percent = (limit - now) / (this.maxTime * 1000)
                // set up the timer
                this.ctx.fillStyle = COLOR3
                this.ctx.fillRect(0, 0, 50, this.canvas.height)

                this.ctx.fillStyle = COLOR2
                this.ctx.fillRect(0,
                    this.canvas.height * percent,
                    50,
                    this.canvas.height)

            }
        }
    }


    //////////////////// utilities //////////////////////

    suffle(anyArray: any[]) {
        return anyArray.sort(() => Math.random() - 0.5)
    }

    randomInt(min: number, max: number): number {
        min = Math.ceil(min)
        max = Math.floor(max)
        return Math.floor(Math.random() * (max - min + 1)) + min
    }
}



interface IQuestion {
    v1: number,
    v2: number,
    v3: number,
    answer: number,
    maxTime: number, // seconds
    drawQuestion: (q: IQuestion) => void, // function to draw the question
    inputBoxPosition: V2,
}


// in case it gets more complicated later
function iQuestionFactory(value1 = 0, value2 = 0, value3 = 0, vAnswer = 0): IQuestion {
    return {
        v1: value1,
        v2: value2,
        v3: value3,
        answer: vAnswer,
        maxTime: 10,
        drawQuestion: () => { },
        inputBoxPosition: V2.zero,
    }
}

// // function to call a drill by name:string
// export function drillByName(name: string, canvasTag: string, n: number) {
//     let drills = new Drills(canvasTag)
//     // console.assert(typeof(drills[name]) != undefined, `could not find a method with the name '${name}'`)

//     drills[name](n)  // execute the function by name
// }


export class Drills extends DrillTools {

    public questions: IQuestion[] = []
    public drawQuestion: IQuestion = iQuestionFactory(0, 0, 0, 0)

    constructor(canvasTag: string) {
        super(canvasTag)

        // hook the observer for answers
        this.answerReceived.addObserver('answer', this.postNewQuestion, this)

        this.setupDrill('1234567890')

    }



    /** eg: add or multiply drill with always the same first number  (eg: 6*2 6*3) */
    simpleTwoValueQuestions(n: number): IQuestion[] {

        console.assert(n > 1 && n <= 12, 'singleTwoValueQuestions only handles 2 to 12')

        // we want about 24 quick drills  (3.5 minutes if on time)
        // but less with smaller numbers

        let nLoops: number
        switch (n) {
            case 2: nLoops = 6; break   // 6 * [0, 1, 2] = 18 loops
            case 3: nLoops = 5; break
            case 4: nLoops = 4; break
            case 5: nLoops = 4; break
            case 6: nLoops = 3; break
            case 7: nLoops = 3; break
            case 8: nLoops = 3; break
            case 9: nLoops = 2; break
            case 10: nLoops = 2; break
            case 11: nLoops = 2; break
            case 12: nLoops = 2; break
            default: nLoops = 2
        }

        // create an array [0, 1, 2, ... n]
        let looper = Array.from(Array(n + 1).keys())

        let questions: IQuestion[] = []
        for (let i = 0; i < nLoops; i++) {  //  nLoops times
            looper.forEach((v) => {
                // we leave the answer blank
                questions.push(iQuestionFactory(n, v, 0, 0))
            })
        }
        console.log('build 20 questions', questions)
        return (questions)
    }


    postNewQuestion() {
        // clear anything
        this.ctx.fillStyle = COLOR3
        this.ctx.fillRect(50, 0, this.canvas.width - 100, this.canvas.height - 50)

        // get a new question
        let q = this.questions.pop()
        if (q !== undefined) {
            this.currentQuestion = q    // others might need it
            console.log('new question', q)

            if (q === undefined) { // out of questions, post the score and done
            }

            // so we have a new question
            q.drawQuestion(q)

            // set up the question parameters
            this.overTime = false
            this.errorKey = false

            // set up the answer box
            this.expectedValue = q.answer.toString()
            this.collectedValue = ''
            this.numberInputBox() // set it up

            // set the timer going
            this.startTime = Date.now()
        }

    }


    singleMultiply(n: number) {  // '6' means 6*2, 6*3, etc
        console.log('in singleMultiply')
        let questions = this.simpleTwoValueQuestions(n)  // array of 20-30 IQuestions
        // questions:IQuestion[] is only partially set up

        questions.map((q) => {
            q.answer = q.v1 * q.v2   // multiply v1 * v2
            q.maxTime = 10  // seconds

            q.drawQuestion = (iQuestion: IQuestion) => {
                this.ctx.font = "bold 80px Arial"
                this.ctx.fillStyle = "blue"
                this.ctx.textAlign = "right"
                this.ctx.fillText(`${iQuestion.v1} x ${iQuestion.v2} =`, 575, 150)
            }

            q.inputBoxPosition = new V2([600, 80])

        })

        console.log('abount to post new question')
        // questions should be good to go...
        this.questions = questions   // make them public
        // and ready to go.  ask the first question...
        this.postNewQuestion()
    }

}
